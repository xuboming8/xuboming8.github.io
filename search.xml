<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[10-16 热身赛]]></title>
      <url>http://xuboming8.github.io/2016/10/20/10-16-%E7%83%AD%E8%BA%AB%E8%B5%9B/</url>
      <content type="html"><![CDATA[<h1 id="周赛（一）"><a href="#周赛（一）" class="headerlink" title="周赛（一）"></a>周赛（一）</h1><h2 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a>Triangle</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709527798.png" alt=""><br><a id="more"></a></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709527867.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709527907.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709527943.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709527986.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>有n根长度不一的火柴（序号为1-n的火柴长度分别为1-n），要求拿走y根火柴使剩下的长度无法组成三角形并且要求y的数量最小。</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;  </div><div class="line">const int N = 25;   </div><div class="line">int s[N]=&#123;0,0,0,0,1,1,2,3,3,4,5,6,7,7,8,9,10,11,12,13,14&#125;;  </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int t,p=1;   </div><div class="line">    cin&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)  </div><div class="line">    &#123;  </div><div class="line">        int n;</div><div class="line">		cin&gt;&gt;n;</div><div class="line">        cout&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;p++&lt;&lt;<span class="string">": "</span>&lt;&lt;s[n]&lt;&lt;endl;</div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于由前三个测试样例为1 1 2，并且算出第四个测试样例为3后可以联想到斐波拉契数列。在斐波拉契数列中，按序任意插入一个数后都一定可以组成三角形。例如abde为<br>四个菲波拉契数，那么a+b=d，b+d=e。在bd中插入c后必然有a+b&gt;c b+c&gt;d。所以在n个有序递增为1的整数中，只需要去掉菲波拉契数即可，剩下的数不可能组成三角形。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>联想到斐波拉契数列后应正确使用。由于本题的数据量很小maxsize只有20，所以可以打表暴力求解，无需刻意编写删除菲波拉契数的算法。</p>
<h2 id="Vitya-in-the-Countryside"><a href="#Vitya-in-the-Countryside" class="headerlink" title="Vitya in the Countryside"></a>Vitya in the Countryside</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709755155.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709755198.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709755245.png" alt=""></p>
<p><strong>Sample Input &amp; output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709763807.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>题目给出循环数 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1。接下来继续以0循环。要求输入给定个数的<br>数字后判断最后一个数字的下一个数相比前一个数在循环中为up还是down，如果无法判断则输出-1。</p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n,a[100];</div><div class="line">	cin&gt;&gt;n;</div><div class="line">	<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">		cin&gt;&gt;a[i];</div><div class="line">	<span class="keyword">if</span>(n==1)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(a[n]==0)</div><div class="line">			cout&lt;&lt;<span class="string">"UP"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">if</span>(a[n]==15)</div><div class="line">			cout&lt;&lt;<span class="string">"DOWN"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">if</span>(a[n]!=0&amp;&amp;a[n]!=15)</div><div class="line">			cout&lt;&lt;<span class="string">"-1"</span>&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(a[n]==0)</div><div class="line">			cout&lt;&lt;<span class="string">"UP"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(a[n]==15)</div><div class="line">				cout&lt;&lt;<span class="string">"DOWN"</span>&lt;&lt;endl;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(a[n]&gt;a[n-1])</div><div class="line">					cout&lt;&lt;<span class="string">"UP"</span>&lt;&lt;endl;</div><div class="line">				<span class="keyword">if</span>(a[n]&lt;a[n-1])</div><div class="line">					cout&lt;&lt;<span class="string">"DOWN"</span>&lt;&lt;endl;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>此题的特殊点在于必须特判0和15两个数字，在判断up down或者-1时只需加入这2个特殊情况即可，输入为1个数字的时候也要特判。</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>此题虽然难度小，题意也很好理解，但极易WA，必须在考虑了所有情况后才可AC。</p>
<h2 id="Anatoly-and-Cockroaches"><a href="#Anatoly-and-Cockroaches" class="headerlink" title="Anatoly and Cockroaches"></a>Anatoly and Cockroaches</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14770982678.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709826974.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709827021.png" alt=""></p>
<p><strong>Sample Input &amp; output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709829648.png" alt=""></p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>给定一个只有r和b的字符串，要求最后操作的结果为rb间隔排列，具体操作为交换任意两个数或把一个位置的r（b）换成b（r），求操作的最小次数。</p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;  </span></div><div class="line"><span class="comment">#include&lt;string.h&gt;  </span></div><div class="line"><span class="comment">#include&lt;stdlib.h&gt;  </span></div><div class="line"><span class="comment">#include&lt;math.h&gt;  </span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;  </span></div><div class="line">using namespace std;  </div><div class="line">const int maxn = 1e5+ 5;  </div><div class="line">char st[maxn];  </div><div class="line">int <span class="function"><span class="title">main</span></span>()&#123;  </div><div class="line">    int n;  </div><div class="line">    scanf(<span class="string">"%d%s"</span>,&amp;n,st);  </div><div class="line">    int cnt1=0,cnt2=0,cnt3=0,cnt4=0;  </div><div class="line">    <span class="keyword">for</span>(int i=0;i&lt;n;i++)&#123;  </div><div class="line">        <span class="keyword">if</span>(i%2==0&amp;&amp;st[i]!=<span class="string">'r'</span>) cnt1++;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i%2==1&amp;&amp;st[i]!=<span class="string">'b'</span>) cnt2++;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(int i=0;i&lt;n;i++)&#123;  </div><div class="line">        <span class="keyword">if</span>(i%2==0&amp;&amp;st[i]!=<span class="string">'b'</span>) cnt3++;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i%2==1&amp;&amp;st[i]!=<span class="string">'r'</span>) cnt4++;  </div><div class="line">    &#125;  </div><div class="line">    int ans1=abs(cnt1-cnt2)+(cnt1+cnt2-abs(cnt1-cnt2))/2;  </div><div class="line">    int ans2=abs(cnt3-cnt4)+(cnt3+cnt4-abs(cnt3-cnt4))/2;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(ans1,ans2));  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>假如有5个字符，那么最后操作完的结果必然为rbrbr或brbrb。分别计算出两种状态下的r需要转换成b和b需要转换成r的位置的个数记为w1和w2，由于在操作过程中要求次<br>数最少，所以优先考虑交换。因为交换可使两个位置达到要求状态而涂色只可改变一个位置。所以计算出w1-w2，这部分由于没有对应的两两交换的可能，所以必须涂色，<br>而剩下的可以两两配对，即可交换。再把两种状态下的结果求min即可。最后的表达式为abs(w1-w2)+(w1+w2-abs(w1-w2))/2.</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>从结果出发较为简便，无需考虑每次交换的过程采用搜索。最后的结果一定为间隔排序那么从结果出发即可。求出最后表达式即可ac。</p>
<h2 id="Efim-and-Strange-Grade"><a href="#Efim-and-Strange-Grade" class="headerlink" title="Efim and Strange Grade"></a>Efim and Strange Grade</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709918955.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709919007.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709919052.png" alt=""></p>
<p><strong>Sample Input &amp; output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147709919093.png" alt=""></p>
<h3 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h3><p>给定一个小数和查询次数，查询时可以随意访问任意一个小数位并进行进位操作，求所有查询过程中的最大值，最后位数的0不可输出。</p>
<h3 id="参考AC代码-3"><a href="#参考AC代码-3" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line"><span class="comment">#define MAX 200050</span></div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    char str[MAX];  </div><div class="line">    int n,t;  </div><div class="line">    int point;  </div><div class="line">    memset(str,0,sizeof(str));  </div><div class="line">    scanf(<span class="string">"%d%d%s"</span>,&amp;n,&amp;t,str);    </div><div class="line">    <span class="keyword">for</span>(int i=n+1;i&gt;=1;i--)  </div><div class="line">    &#123;  </div><div class="line">        str[i]=str[i-1];  </div><div class="line">    &#125;  </div><div class="line">    str[0]=<span class="string">'0'</span>;  </div><div class="line">    <span class="keyword">for</span>(int i=1;i&lt;=n;i++)  </div><div class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'.'</span>)  </div><div class="line">            point = i;  </div><div class="line">    int flag = 0;  </div><div class="line">    <span class="keyword">for</span>(int i=point+1;i&lt;strlen(str);i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(str[i]&gt;=<span class="string">'5'</span>)  </div><div class="line">        &#123;  </div><div class="line">            flag = i;  </div><div class="line">            <span class="built_in">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">while</span>(t--)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(str[flag]&lt;<span class="string">'5'</span>)   </div><div class="line">            <span class="built_in">break</span>;  </div><div class="line">        str[flag]=<span class="string">'\0'</span>;  </div><div class="line">        <span class="keyword">if</span>(str[flag-1]==<span class="string">'.'</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">for</span>(int i=point-1;i&gt;=0;i--)  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(str[i]==<span class="string">'9'</span>)  </div><div class="line">                    str[i]=<span class="string">'0'</span>;  </div><div class="line">                <span class="keyword">else</span>  </div><div class="line">                &#123;  </div><div class="line">                    str[i]+=1;  </div><div class="line">                    <span class="built_in">break</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125; </div><div class="line">			str[point]=<span class="string">'\0'</span>;</div><div class="line">            <span class="built_in">break</span>;    </div><div class="line">        &#125;  </div><div class="line">        str[--flag] +=1;   </div><div class="line">    &#125;     </div><div class="line">    <span class="keyword">for</span>(int i=strlen(str)-1;i&gt;=point;i--)  </div><div class="line">    &#123;  </div><div class="line">          </div><div class="line">        <span class="keyword">if</span>(str[i]!=<span class="string">'0'</span>)  </div><div class="line">            <span class="built_in">break</span>;  </div><div class="line">        str[i]=<span class="string">'\0'</span>;  </div><div class="line">    &#125;      </div><div class="line">    <span class="keyword">if</span>(str[0]==<span class="string">'1'</span>)  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"1"</span>);  </div><div class="line">	puts(str+1);</div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>求出小数点后第一个大于4的位数后依次向前判断即可。具体操作如下：输入时留出str[0]的位置防止进位数组越界。之后计算出小数点的位置point和第一个大于4的位置<br>flag，若所有位置都无需进位那么flag依旧为初始化的0，只执行最后一步的puts（str+1）。在找出第一个进位的position以后执行while循环，需要特判若进位时小数点<br>左边+1的情况，若为9则+1后变为0，str[0]变为1。只要有一位小于5退出循环它就是最大数。若进位时未牵涉到小数点那么执行str[–flag]+=1的进位操作，继续检查下<br>一个flag位。再由strlen（str）-1位置开始向前扫面去掉末尾的0后输出结果。若str[0]==1说明整数部位由9变为了10那么输出1，结果剩下的部分由puts输出。</p>
<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>此题需要注意会不断的通过赋值’\0’缩减字符串，要正确判断在在什么时候什么位置加上结束符。整数部分可能进位后多产生一位，所以str[0]必须在输入数据的时候空出<br>来以防溢出。最后输出的时候若用cout或printf均超时，所以用专门的字符串输出函数puts即可。</p>
<h2 id="The-more-The-Better"><a href="#The-more-The-Better" class="headerlink" title="The more, The Better"></a>The more, The Better</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710144995.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710145035.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710145081.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14771014512.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710145158.png" alt=""></p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码(1)"></a>参考AC代码(1)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;  </span></div><div class="line"><span class="comment">#include &lt;string.h&gt;  </span></div><div class="line"><span class="comment">#include &lt;algorithm&gt;  </span></div><div class="line">using namespace std;   </div><div class="line">struct node  </div><div class="line">&#123;  </div><div class="line">    int to,next;  </div><div class="line">&#125; tree[205];  </div><div class="line">int vis[205],dp[205][205],ans[205][205],head[205],money[205]; </div><div class="line">int len,n,m;    </div><div class="line">void add(int a,int b)  </div><div class="line">&#123;  </div><div class="line">    tree[len].to = b;  </div><div class="line">    tree[len].next = head[a];  </div><div class="line">    head[a] = len++;  </div><div class="line">&#125;   </div><div class="line">void dfs(int root)  </div><div class="line">&#123;  </div><div class="line">    int i,j,k,tem;  </div><div class="line">    vis[root] = 1;  </div><div class="line">    <span class="keyword">for</span>(i = head[root]; i!=-1; i = tree[i].next)  </div><div class="line">    &#123;  </div><div class="line">        tem = tree[i].to;  </div><div class="line">        <span class="keyword">if</span>(!vis[tem])  </div><div class="line">        &#123;  </div><div class="line">            dfs(tem);  </div><div class="line">            <span class="keyword">for</span>(k = m; k&gt;=0; k--)//01背包  </div><div class="line">                <span class="keyword">for</span>(j = 0; j&lt;=k; j++)  </div><div class="line">                    ans[root][k] = max(ans[root][k],ans[root][k-j]+dp[tem][j]);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(j = 1; j&lt;=m+1; j++)  </div><div class="line">        dp[root][j] = ans[root][j-1]+money[root];  </div><div class="line">&#125;    </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int i,a,b;  </div><div class="line">    <span class="keyword">while</span>(~scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m),n+m)  </div><div class="line">    &#123;  </div><div class="line">        len = 0;  </div><div class="line">        memset(head,-1,sizeof(head));  </div><div class="line">        <span class="keyword">for</span>(i = 1; i&lt;=n; i++)  </div><div class="line">        &#123;  </div><div class="line">            scanf(<span class="string">"%d%d"</span>,&amp;a,&amp;b);  </div><div class="line">            money[i] = b;  </div><div class="line">            add(a,i);  </div><div class="line">        &#125;  </div><div class="line">        money[0] = 0;  </div><div class="line">        memset(vis,0,sizeof(vis));  </div><div class="line">        memset(dp,0,sizeof(dp));  </div><div class="line">        memset(ans,0,sizeof(ans));  </div><div class="line">        dfs(0);  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[0][m+1]);  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考AC代码（二）"><a href="#参考AC代码（二）" class="headerlink" title="参考AC代码（二）"></a>参考AC代码（二）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;  </span></div><div class="line"><span class="comment">#include &lt;string.h&gt;  </span></div><div class="line"><span class="comment">#include &lt;algorithm&gt;  </span></div><div class="line">using namespace std;  </div><div class="line"></div><div class="line">int n,m;</div><div class="line">int num[255];</div><div class="line">int  map[255][255];</div><div class="line">int dp[255][255];</div><div class="line">bool v[255];</div><div class="line">void dfs(int root)&#123;</div><div class="line">    int i,j,k;</div><div class="line">    v[root]=<span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(i=1;i&lt;=num[root];i++)</div><div class="line">	&#123;</div><div class="line">        int t=map[root][i];       //son </div><div class="line">        <span class="keyword">if</span>(!v[t]) </div><div class="line">		dfs(t);         //若未访问 则跟进 </div><div class="line">        <span class="keyword">for</span>(j=m;j&gt;=2;j--)</div><div class="line">		&#123;         //选择1个的状态不用更新了，因为是强制要加进去的，即必须先选择的</div><div class="line">            <span class="keyword">for</span>(k=1;k&lt;j;k++)</div><div class="line">			&#123;</div><div class="line">				dp[root][j]=max(dp[root][j],dp[root][k]+dp[t][j-k]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()&#123;</div><div class="line">    int i,j;</div><div class="line">    <span class="keyword">while</span>(scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m),n||m)</div><div class="line">	&#123;</div><div class="line">        int a,b;</div><div class="line">        dp[0][1]=0;        //添加一个0号点为根节点，必取，价值为0</div><div class="line">        memset(num,0,sizeof(num));</div><div class="line">        <span class="keyword">for</span>(i=1;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">            scanf(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">            dp[i][1]=b; </div><div class="line">            map[a][++num[a]]=i;          //边集数组</div><div class="line">        &#125;</div><div class="line">        m++;        //增加一个点，森林转换成树</div><div class="line">        <span class="keyword">for</span>(i=0;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">            dp[i][0]=0;</div><div class="line">			v[i]=0;</div><div class="line">            <span class="keyword">for</span>(j=2;j&lt;=m;j++)</div><div class="line">			&#123;</div><div class="line">                dp[i][j]=0;</div><div class="line">            &#125;</div><div class="line">        &#125;           //初始化 </div><div class="line">        dfs(0);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[0][m]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>AC代码（1）：<br>使用了<a href="http://blog.csdn.net/acdreamers/article/details/16902023" target="_blank" rel="external">前向星</a>这种特殊的边集数组来模拟链表实现对树的遍历。链接中博主对前向星做出了十分详细的介绍，这里不在赘述。<br>vis数组用来记录走过的位置，dp[root][k]表示必取根节点root访问k个城堡获取的最大价值，ans[root][k]表示不取根节点root访问k个城堡获取的最大价值。在构建好前<br>向星后，进入dfs进行深搜。注意此时的最大价值类似于01背包问题，所以第一层for循环逆序，正序会使得重复访问得到错误结果。由于dp表示必取根节点，所以在执行遍<br>历时上限应为m+1,0号结点价值为0必取，这里它也算作了一个城堡，所以最后的输出结果为dp[0][m+1]。在dfs的两层for循环中必须取到0，因为考虑到了根节点未取到的<br>情况。最后的状态转移方程dp[root][j]=ans[root][j-1]+money[root]意义为：根结点的价值+不取根节点向上遍历j-1个城堡的价值就是dp里遍历j个城堡的最大价值。dp<br>和ans数组的列始终应保持差1的状态（由数组本身的意义 取不取根节点决定的）。<br>AC代码（2）：<br>构建边集数组来存放图。边集数组map[a][b]表示以a为父结点有子节点数b。num[a]表示以a为父结点存放的子节点数，dp[][1]表示只取一个根节点的价值赋值为b，<br>dp[][0]初始化为0。dfs的遍历过程与一类似，这里只需要注意for循环里的下限即可。由于dp[][0/1]的价值是固定不变的无需更新，所以j的下限只需取到2，由于<br>dp[][0]并没有意义，所以k的下限只需取到1即可。状态转移方程与一类似。</p>
<h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意对状态转移方程的理解以及如何对树的遍历：上面介绍了两种方法，用数组模拟链表的前向星和用数组存图的边集数组。两种方法中最后的dp中的m均为m+1，因为把0号<br>结点当作为价值为0的0号结点，方便遍历。dfs中两层for循环的更新顺序与上下限也需要额外注意，由数组本身的意义来确定范围。</p>
<h2 id="Color-the-ball"><a href="#Color-the-ball" class="headerlink" title="Color the ball"></a>Color the ball</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710440423.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710440489.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710446703.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710442423.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147710442767.png" alt=""></p>
<h3 id="参考AC代码-4"><a href="#参考AC代码-4" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line"><span class="comment">#define MAX 100005</span></div><div class="line">int c[MAX];</div><div class="line">int lowbit(int x)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> x&amp;(-x);</div><div class="line">&#125;</div><div class="line">void change(int i,int n,int x)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(i&lt;=n)</div><div class="line">	&#123;</div><div class="line">		int s=lowbit(i);</div><div class="line">		c[i]+=x;</div><div class="line">		i+=s;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">int sum(int idx)</div><div class="line">&#123;</div><div class="line">	int sum=0;</div><div class="line">	<span class="keyword">while</span>(idx&gt;0)</div><div class="line">	&#123;</div><div class="line">		int s=lowbit(idx);</div><div class="line">		sum+=c[idx];</div><div class="line">		idx-=s;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> sum;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int N,a,b;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;N&amp;&amp;N!=0)</div><div class="line">	&#123;</div><div class="line">		memset(c,0,sizeof(c));</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N;i++)</div><div class="line">		&#123;</div><div class="line">			cin&gt;&gt;a&gt;&gt;b;</div><div class="line">			change(a,N,1);</div><div class="line">			change(b+1,N,-1);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=N;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(i==1)</div><div class="line">				cout&lt;&lt;c[i];</div><div class="line">			<span class="keyword">else</span></div><div class="line">				cout&lt;&lt;<span class="string">" "</span>&lt;&lt;sum(i);</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>典型的树状数组问题，由于数据量过大且是区间问题，所以用树状数组可以快速求解。a到b的区间+1可以表示为a到上限+1 b到上限-1.</p>
<h3 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h3><p>理解树状数组的存储原理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[神奇的树状数组]]></title>
      <url>http://xuboming8.github.io/2016/10/03/%E7%A5%9E%E5%A5%87%E7%9A%84%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h1 id="树状数组的存储原理"><a href="#树状数组的存储原理" class="headerlink" title="树状数组的存储原理"></a>树状数组的存储原理</h1><p><a href="http://www.cnblogs.com/fancy-itlife/p/4312170.html" target="_blank" rel="external">转跳链接</a></p>
<h2 id="例题-ACM-HDOJ-1166"><a href="#例题-ACM-HDOJ-1166" class="headerlink" title="(例题)ACM-HDOJ 1166"></a>(例题)ACM-HDOJ 1166</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147549666304.png" alt=""><br><a id="more"></a></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147549666368.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147549666408.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147549666456.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147549666497.png" alt=""></p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;string&gt;</span></div><div class="line">using namespace std;</div><div class="line"><span class="comment">#define MAX 50005</span></div><div class="line">int c[MAX],que[MAX];</div><div class="line">int lowbit(int x)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> x&amp;(-x);</div><div class="line">&#125;</div><div class="line">void create(int n)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">	&#123;</div><div class="line">		int s=lowbit(i);</div><div class="line">		<span class="keyword">for</span>(int j=0;j&lt;s;j++)</div><div class="line">			c[i]+=que[i-j];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">int sum(int idx)</div><div class="line">&#123;</div><div class="line">	int sum=0;</div><div class="line">	<span class="keyword">while</span>(idx&gt;0)</div><div class="line">	&#123;</div><div class="line">		int s=lowbit(idx);</div><div class="line">		sum+=c[idx];</div><div class="line">		idx-=s;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> sum;</div><div class="line">&#125;</div><div class="line">void change(int i,int n,int x)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(i&lt;=n)</div><div class="line">	&#123;</div><div class="line">		int s=lowbit(i);</div><div class="line">		c[i]+=x;</div><div class="line">		i+=s;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int t,j=1;</div><div class="line">	scanf(<span class="string">"%d"</span>,&amp;t);</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		int N;</div><div class="line">		scanf(<span class="string">"%d"</span>,&amp;N);</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=N;i++)</div><div class="line">			scanf(<span class="string">"%d"</span>,&amp;que[i]);</div><div class="line">		memset(c,0,sizeof(c));</div><div class="line">		create(N);</div><div class="line">		cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;j++&lt;&lt;<span class="string">":"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">while</span>(1)</div><div class="line">		&#123;</div><div class="line">			char ch[10];</div><div class="line">			int i,n,a,b;</div><div class="line">			scanf(<span class="string">"%s"</span>,ch);</div><div class="line">			<span class="keyword">if</span>(!strcmp(ch,<span class="string">"Add"</span>))</div><div class="line">			&#123;</div><div class="line">				scanf(<span class="string">"%d%d"</span>,&amp;i,&amp;n);</div><div class="line">				change(i,N,n);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(!strcmp(ch,<span class="string">"Sub"</span>))</div><div class="line">			&#123;</div><div class="line">				scanf(<span class="string">"%d%d"</span>,&amp;i,&amp;n);</div><div class="line">				change(i,N,-n);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(!strcmp(ch,<span class="string">"Query"</span>))</div><div class="line">			&#123;</div><div class="line">				scanf(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">				int s=sum(b)-sum(a-1);</div><div class="line">				cout&lt;&lt;s&lt;&lt;endl;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				<span class="built_in">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[atoi与itoa函数介绍]]></title>
      <url>http://xuboming8.github.io/2016/09/01/atoi%E4%B8%8Eitoa%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="atoi函数与itoa函数"><a href="#atoi函数与itoa函数" class="headerlink" title="atoi函数与itoa函数"></a>atoi函数与itoa函数</h1><h2 id="atoi函数"><a href="#atoi函数" class="headerlink" title="atoi函数"></a>atoi函数</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>把字符串转换成整形数<br><a id="more"></a></p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>int atoi(const char *str);<br>函数的返回值用一个整形变量接受，str表示准备进行转换的字符串。</p>
<h3 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h3><p>atoi( ) 函数会扫描参数str字符串，跳过前面的空白字符（例如空格，tab缩进等），直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时<br>(‘\0’)才结束转换，并将结果返回。如果str不能转换成int或者str为空字符串，那么将返回0。需要加入头文件stdlib.h。</p>
<h3 id="简化实例"><a href="#简化实例" class="headerlink" title="简化实例"></a>简化实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int n;</div><div class="line">char *str=<span class="string">"12345.67"</span>;</div><div class="line">n=atoi(str);</div><div class="line">cout&lt;&lt;n&lt;&lt;endl;</div></pre></td></tr></table></figure>
<p>输出结果为12345</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">char a[]=<span class="string">"-100"</span>;</div><div class="line">char b[]=<span class="string">"123"</span>;</div><div class="line">int c;</div><div class="line">c=atoi(a)+atoi(b);</div><div class="line">cout&lt;&lt;c&lt;&lt;endl;</div></pre></td></tr></table></figure>
<p>输出结果为23</p>
<h2 id="itoa函数"><a href="#itoa函数" class="headerlink" title="itoa函数"></a>itoa函数</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>将整形转换为字符串</p>
<h3 id="原型-1"><a href="#原型-1" class="headerlink" title="原型"></a>原型</h3><p>char<br>char &#42;itoa(int value,char &#42;string,int radix);<br>value为被转换的整数，string为转换后储存的字符数组，radix转换进制数，如2,8,10,16 进制等。使用需加入头文件stdlib.h。</p>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int number=123456;</div><div class="line">char string[25];</div><div class="line">itoa(number,string,10);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础排序算法]]></title>
      <url>http://xuboming8.github.io/2016/09/01/%E4%B9%9D%E5%A4%A7%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="基础排序算法总结与对比"><a href="#基础排序算法总结与对比" class="headerlink" title="基础排序算法总结与对比"></a>基础排序算法总结与对比</h1><h2 id="总结与对比"><a href="#总结与对比" class="headerlink" title="总结与对比"></a>总结与对比</h2><p><strong>1.均按从小到大排序</strong><br><strong>2.k代表数值中的“数位”个数</strong><br><strong>3.n代表数据规模</strong><br><strong>4.m代表数据的最大值减最小值</strong><br><a id="more"></a></p>
<div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147269242105.png" alt=""><br></div>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>冒泡排序通过重复地走访要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来，直到没有再需要交换的元素为止。这个算法的名字由来是因为越小<br>的元素会经由交换慢慢“浮”到数列的顶端。</p>
<h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。　<br>2.对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br>3.针对所有的元素重复以上的步骤，除了最后一个。<br>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>
<h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void Bubble(int a[],int n)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int i=1;i&lt;n;i++)</div><div class="line">		<span class="keyword">for</span>(int j=0;j&lt;n-i;j++)</div><div class="line">			<span class="keyword">if</span>(a[j]&gt;a[j+1])</div><div class="line">			&#123;</div><div class="line">				int temp;</div><div class="line">				temp=a[j];</div><div class="line">				a[j]=a[j+1];</div><div class="line">				a[j+1]=temp;</div><div class="line">			&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="改进代码实例"><a href="#改进代码实例" class="headerlink" title="改进代码实例"></a>改进代码实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">void Bubble(int a[],int n)</div><div class="line">&#123;</div><div class="line">	bool flag=<span class="literal">true</span>;</div><div class="line">	<span class="keyword">while</span>(flag)</div><div class="line">	&#123;</div><div class="line">		flag=<span class="literal">false</span>;</div><div class="line">		<span class="keyword">for</span>(int i=0;j&lt;n-1;j++)</div><div class="line">			<span class="keyword">if</span>(a[j]&gt;a[j+1])</div><div class="line">			&#123;</div><div class="line">				int temp;</div><div class="line">				temp=a[j];</div><div class="line">				a[j]=a[j+1];</div><div class="line">				a[j+1]=temp;</div><div class="line">				flag=<span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">		n--;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//该代码的好处是如果某次交换后后面的元素已经是升序排列，那么将不再进入循环节省了时间。</div></pre></td></tr></table></figure>
<h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>设所排序序列的记录个数为n，i　取　1,2,…,n-1　。<br>从所有n-i+1个记录（Ri,Ri+1,…,Rn）中找出排序码最小（或最大）的记录，与第i个记录交换。执行n-1趟 后就完成了记录序列的排序。 </p>
<h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147387163491.png" alt=""><br></div>

<div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147387163504.png" alt=""><br></div>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DP问题专题四 背包延伸]]></title>
      <url>http://xuboming8.github.io/2016/08/30/DP%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98%E5%9B%9B-%E8%83%8C%E5%8C%85%E5%BB%B6%E4%BC%B8/</url>
      <content type="html"><![CDATA[<h1 id="分组背包-混合背包-二维背包"><a href="#分组背包-混合背包-二维背包" class="headerlink" title="分组背包 混合背包 二维背包"></a>分组背包 混合背包 二维背包</h1><h2 id="ACM-HDOJ-1712-分组背包"><a href="#ACM-HDOJ-1712-分组背包" class="headerlink" title="ACM-HDOJ 1712(分组背包)"></a>ACM-HDOJ 1712(分组背包)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166963402.png" alt=""></p>
<p><strong>Input</strong><br><a id="more"></a><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166963447.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166963483.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166963515.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166963608.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>在规定的时候内复习规定的课程，每门课程复习对应的天数有对应的成效。求在规定时间内的最大成效。第一行的两个数字代表课程数量和拥有的天数。对应的矩阵代表：<br>第一行第一列代表复习第一门一天的成效，第一行第二列代表复习第一门二天的成效，第二行代表第二门课，以此类推。</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">int dp[105],m,matrix[105][105];</div><div class="line">void GroupedPack(int x)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int i=m;i&gt;0;i--)</div><div class="line">		<span class="keyword">for</span>(int j=i;j&gt;0;j--)</div><div class="line">			dp[i]=max(dp[i],dp[i-j]+matrix[x][j]);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n==0&amp;&amp;m==0)</div><div class="line">			<span class="built_in">break</span>;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			<span class="keyword">for</span>(int j=1;j&lt;=m;j++)</div><div class="line">				cin&gt;&gt;matrix[i][j];</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			GroupedPack(i);</div><div class="line">		cout&lt;&lt;dp[m]&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于每门课复习不同的天数有不同的成效，所以用分组背包来求解。在一般背包的基础上多加一层for循环来判断每种物品不同的价值即可。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>第三个for循环中的j必须从i开始递减至0，因为每门课花费的天数必须少于给定的总天数。</p>
<h2 id="ACM-HDOJ-3591-混合背包"><a href="#ACM-HDOJ-3591-混合背包" class="headerlink" title="ACM-HDOJ 3591(混合背包)"></a>ACM-HDOJ 3591(混合背包)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147169450293.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147169450342.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147169450377.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147169450411.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147169450445.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>小倩去超市买东西。第一行给出两个数据表示她带有的硬币数目和需要买的商品的总资金，下面n行代表硬币的面额和数量。买完商品如果给出的钱超出了总价值，那么收<br>银员会找对应的钱。小倩给出的钱最多为2w，已知收银员的硬币无数，求小倩买商品的硬币和收银员找零的硬币和的最小数量。</p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line"><span class="comment">#define m 20000</span></div><div class="line"><span class="comment">#define Inf 0x7FFFFFF</span></div><div class="line">using namespace std;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int num,value;</div><div class="line">&#125;coin[250];</div><div class="line">int dp1[m+5],dp2[m+5],n;</div><div class="line">void ZeroOnePack(int dp[],int value,int weight)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int v=m;v&gt;=value;v--)</div><div class="line">		dp[v]=min(dp[v],dp[v-value]+weight);</div><div class="line">&#125;</div><div class="line">void CompletePack(int dp[],int value)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int v=value;v&lt;=m;v++)</div><div class="line">		dp[v]=min(dp[v],dp[v-value]+1);</div><div class="line">&#125;</div><div class="line">void MultiPack(int dp[],int value,int amount)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(value*amount&gt;=m)</div><div class="line">	&#123;</div><div class="line">		CompletePack(dp,value);</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(int k=1;k&lt;amount;k*=2)</div><div class="line">	&#123;</div><div class="line">		ZeroOnePack(dp,k*value,k);</div><div class="line">		amount-=k;</div><div class="line">	&#125;</div><div class="line">	ZeroOnePack(dp,amount*value,amount);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n,t,flag=1;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;t)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n==0&amp;&amp;t==0)</div><div class="line">			<span class="built_in">break</span>;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			cin&gt;&gt;coin[i].value;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			cin&gt;&gt;coin[i].num;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=m;i++)</div><div class="line">			dp1[i]=dp2[i]=Inf;</div><div class="line">		dp1[0]=dp2[0]=0;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			MultiPack(dp1,coin[i].value,coin[i].num);</div><div class="line">			CompletePack(dp2,coin[i].value);</div><div class="line">		&#125;</div><div class="line">		int ans=dp1[t];</div><div class="line">		<span class="keyword">for</span>(int i=t+1;i&lt;=20000;i++)</div><div class="line">			ans=min(ans,dp1[i]+dp2[i-t]);</div><div class="line">		<span class="keyword">if</span>(ans==Inf)</div><div class="line">			cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;flag++&lt;&lt;<span class="string">": -1"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;flag++&lt;&lt;<span class="string">": "</span>&lt;&lt;ans&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>完全背包+多重背包：由于小倩买东西的时候给出的商品数量已知，所以是多重背包问题。收银员找钱的时候由于硬币无数，所以是完全背包问题。定义2个数组dp1和dp2<br>分别记录2种背包的状态。由于求的是最小数量，所以两个dp数组初始化为Inf，dp[0]初始化为0.带入模版求完后求出最小值。注意dp1[i]与dp2[i-t]即可(i是小倩付的钱).</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于此题求的是最小数量而不是最小价值，所以原本的多重背包的模版应稍作调整。max函数换成min，删去原本模版中的weight(硬币的数量都是一个一个的放入背包中)，<br>01背包背包中状态方程中min的第二项的后面应加weight而完全背包中应加1，理由如下：01背包中使用了二进制优化，所以k带入01背包后由于修改了面纸，对应面纸的<br>硬币原本的数量已经不为1，所以需要加上weight(k),而完全背包中是严格的一个硬币对应原本的面纸，所以min中第二项只需加1即可，无需引入weight变量。</p>
<h2 id="ACM-HDOJ-2159-二维完全背包"><a href="#ACM-HDOJ-2159-二维完全背包" class="headerlink" title="ACM-HDOJ 2159(二维完全背包)"></a>ACM-HDOJ 2159(二维完全背包)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14720190837.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147201908413.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147201908449.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147201908482.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147201908515.png" alt=""></p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int value,weight;</div><div class="line">&#125;a[105];</div><div class="line">int dp[105][105];</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n,m,k,s,i;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;s)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=k;i++)</div><div class="line">			cin&gt;&gt;a[i].value&gt;&gt;a[i].weight;</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		<span class="keyword">for</span>(i=1;i&lt;=m;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span>(int j=1;j&lt;=k;j++)</div><div class="line">				<span class="keyword">for</span>(int w=1;w&lt;=s;w++)</div><div class="line">					<span class="keyword">if</span>(a[j].weight&lt;=i)</div><div class="line">						dp[i][w]=max(dp[i][w],dp[i<span class="_">-a</span>[j].weight][w-1]+a[j].value);</div><div class="line">			<span class="keyword">if</span>(dp[i][s]&gt;=n)</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(i&gt;m)</div><div class="line">			cout&lt;&lt;<span class="string">"-1"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;m-i&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>dp[i][k]表示在i忍耐度下杀k只怪所得到的最多经验，状态转移方程为:dp[i][k]=max(dp[i][k],dp[i-a[j].w][k-1]+a[j].v)。三个for循环分别表示忍耐度，怪物的种类以<br>及怪物的最大击杀量(从w=1开始实际就表示为击杀量)，并且在使用状态方程前应判断该种类的怪物消耗的忍耐度要小于人持有的忍耐度。若当前获得的经验已经可以升级，<br>那么立即退出循环，此时的i就是使用掉的忍耐度。如果i大于总忍耐度m那么输出-1，否则输出m-i(剩下的最大忍耐度)。</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>此问题的实质依然为完全背包，要正确理解三个for循环的顺序与意义，第一个for循环于忍耐度有关，剩下2个for循环与怪物有关。并且在使用状态方程前一定要判断该种类<br>怪物的忍耐度是够小于人的总忍耐度。</p>
<h2 id="ACM-HDOJ-3496-二维01背包"><a href="#ACM-HDOJ-3496-二维01背包" class="headerlink" title="ACM-HDOJ 3496(二维01背包)"></a>ACM-HDOJ 3496(二维01背包)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147203654342.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147203654402.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147203654439.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147203654472.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147203654506.png" alt=""></p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>要求在N盘DVD中选出M盘，每盘DVD都有对应的耗时和价值，要求在耗时小于l的情况下求出看完M盘DVD所获得的最大价值。</p>
<h3 id="参考AC代码-3"><a href="#参考AC代码-3" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line"><span class="comment">#define Inf 0x7FFFFFF</span></div><div class="line">using namespace std;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int value,cost;</div><div class="line">&#125;a[105];</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int t;</div><div class="line">	cin&gt;&gt;t;</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		int n,m,l;</div><div class="line">		int dp[105][1005];</div><div class="line">		cin&gt;&gt;n&gt;&gt;m&gt;&gt;l;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			cin&gt;&gt;a[i].cost&gt;&gt;a[i].value;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;=m;i++)</div><div class="line">			<span class="keyword">for</span>(int j=0;j&lt;=l;j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(i==0)</div><div class="line">					dp[i][j]=0;</div><div class="line">				<span class="keyword">else</span></div><div class="line">					dp[i][j]=-Inf;</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			<span class="keyword">for</span>(int j=m;j&gt;=1;j--)</div><div class="line">				<span class="keyword">for</span>(int k=l;k&gt;=a[i].cost;k--)</div><div class="line">					dp[j][k]=max(dp[j][k],dp[j-1][k<span class="_">-a</span>[i].cost]+a[i].value);</div><div class="line">		<span class="keyword">if</span>(dp[m][l]&gt;0)</div><div class="line">			cout&lt;&lt;dp[m][l]&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"0"</span>&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>01背包的模型，但由于有DVD光盘数限制和时间限制2个条件，所以使用二维数组求解。dp[i][k]表示看完i盘DVD且耗时k的情况下获得的最大价值。dp的初始化需要把第一<br>行赋值为0，其余为-Inf。三个for循环分别代表总光盘数，看的光盘数和耗时(逆序)，如果价值小于0则输出0.</p>
<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于此题存在价值为负的情况，所以最后dp求出的值若为负数则要输出0。另外dp数组的初始化也要额外注意，因为价值有负，所以dp数组的第一行需要初始化为0，其余<br>复制为-Inf。dp数组的初始化要从0开始。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DP问题专题三 完全·分组背包巩固]]></title>
      <url>http://xuboming8.github.io/2016/08/30/DP%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98%E4%B8%89-%E5%AE%8C%E5%85%A8%C2%B7%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85%E5%B7%A9%E5%9B%BA/</url>
      <content type="html"><![CDATA[<h1 id="完全背包-分组背包巩固与强化"><a href="#完全背包-分组背包巩固与强化" class="headerlink" title="完全背包 分组背包巩固与强化"></a>完全背包 分组背包巩固与强化</h1><h2 id="ACM-HDOJ-1171-多重背包水题"><a href="#ACM-HDOJ-1171-多重背包水题" class="headerlink" title="ACM-HDOJ 1171(多重背包水题)"></a>ACM-HDOJ 1171(多重背包水题)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141028211.png" alt=""></p>
<p><strong>Input</strong><br><a id="more"></a><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141028252.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141028293.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141028328.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141028369.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>与1059题类似，只是输出变成了平分的结果，若不能平分则前者必须不小于后者。</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int value,num;</div><div class="line">&#125;a[55];</div><div class="line">int dp[250050];</div><div class="line">int m;</div><div class="line">void ZeroOnePack(int value,int weight)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int v=m;v&gt;=value;v--)</div><div class="line">		dp[v]=max(dp[v],dp[v-value]+weight);</div><div class="line">&#125;</div><div class="line">void CompletePack(int value,int weight)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int v=value;v&lt;=m;v++)</div><div class="line">		dp[v]=max(dp[v],dp[v-value]+weight);</div><div class="line">&#125;</div><div class="line">void MultiPack(int value,int weight,int amount)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(value*amount&gt;=m)</div><div class="line">	&#123;</div><div class="line">		CompletePack(value,weight);</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(int k=1;k&lt;amount;k*=2)</div><div class="line">	&#123;</div><div class="line">		ZeroOnePack(k*value,k*weight);</div><div class="line">		amount-=k;</div><div class="line">	&#125;</div><div class="line">	ZeroOnePack(amount*value,amount*weight);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n &amp;&amp; n&gt;=0)</div><div class="line">	&#123;</div><div class="line">		int sum=0;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			cin&gt;&gt;a[i].value&gt;&gt;a[i].num;</div><div class="line">			sum+=a[i].value*a[i].num;</div><div class="line">		&#125;</div><div class="line">		m=sum&gt;&gt;1;</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			MultiPack(a[i].value,a[i].value,a[i].num);</div><div class="line">		<span class="keyword">if</span>(dp[m]==m)</div><div class="line">			cout&lt;&lt;m&lt;&lt;<span class="string">" "</span>&lt;&lt;m&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;sum-dp[m]&lt;&lt;<span class="string">" "</span>&lt;&lt;dp[m]&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>依旧运用背包模版进行解答，具体思路参考ACM-HDOJ 1059题。<br>多重背包模版的思路：若该物品价值大于背包最大容量则进入完全背包求解，否则进行01背包求解，其中可以进行二进制优化减少运算时间。(比如有价值为20的物品2个<br>，可以看成价值为20的物品和价值为20的物品，以此类推就转化为01背包问题了。)<br><a href="http://monkeyxu.cn/2016/08/30/DP%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98%E4%B8%80-Dynamic-Programming-%E8%83%8C%E5%8C%85%E5%85%A5%E9%97%A8/" target="_blank" rel="external">转跳ACM-HDOJ 1059</a></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>输出的前者必须大于等于后者，注意dp数组的大小是50×50×100.由于dp[m]是最优解，所以sum-dp[m]必然大于dp[m]。<br>其余参考ACM-HDOJ 1059题。</p>
<h2 id="ACM-HDOJ-2191-多重背包水题"><a href="#ACM-HDOJ-2191-多重背包水题" class="headerlink" title="ACM-HDOJ 2191(多重背包水题)"></a>ACM-HDOJ 2191(多重背包水题)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166259497.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166259541.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166259577.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14716625961.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147166259644.png" alt=""></p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">int dp[105],n;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int v,w,num;</div><div class="line">&#125;a[105];</div><div class="line">void ZeroOnePack(int value,int weight)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int v=n;v&gt;=value;v--)</div><div class="line">		dp[v]=max(dp[v],dp[v-value]+weight);</div><div class="line">&#125;</div><div class="line">void CompletePack(int value,int weight)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int v=value;v&lt;=n;v++)</div><div class="line">		dp[v]=max(dp[v],dp[v-value]+weight);</div><div class="line">&#125;</div><div class="line">void MultiPack(int value,int weight,int amount)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(value*amount&gt;=n)</div><div class="line">	&#123;</div><div class="line">		CompletePack(value,weight);</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(int k=1;k&lt;amount;k*=2)</div><div class="line">	&#123;</div><div class="line">		ZeroOnePack(k*value,k*weight);</div><div class="line">		amount-=k;</div><div class="line">	&#125;</div><div class="line">	ZeroOnePack(amount*value,amount*weight);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int t;</div><div class="line">	cin&gt;&gt;t;</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		int m;</div><div class="line">		cin&gt;&gt;n&gt;&gt;m;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=m;i++)</div><div class="line">			cin&gt;&gt;a[i].v&gt;&gt;a[i].w&gt;&gt;a[i].num;</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=m;i++)</div><div class="line">			MultiPack(a[i].v,a[i].w,a[i].num);</div><div class="line">		cout&lt;&lt;dp[n]&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>使用多重背包模版</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意dp数组的大小。</p>
<h2 id="ACM-HDOJ-1114-完全背包变形"><a href="#ACM-HDOJ-1114-完全背包变形" class="headerlink" title="ACM-HDOJ 1114(完全背包变形)"></a>ACM-HDOJ 1114(完全背包变形)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147159660465.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147159660514.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147159660554.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147159660588.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147159660627.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>完全背包变形。只是把求最优解变成了求装满背包的最小值。</p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line"><span class="comment"># define Inf 0x7FFFFFF</span></div><div class="line">using namespace std;</div><div class="line">int dp[10005];</div><div class="line">int sum;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int p,w;</div><div class="line">&#125;coin[550];</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int t;</div><div class="line">	cin&gt;&gt;t;</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		int E,F,n;</div><div class="line">		cin&gt;&gt;E&gt;&gt;F;</div><div class="line">		sum=F-E;</div><div class="line">		cin&gt;&gt;n;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">			cin&gt;&gt;coin[i].p&gt;&gt;coin[i].w;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;100005;i++)</div><div class="line">			dp[i]=Inf;</div><div class="line">		dp[0]=0;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">			<span class="keyword">for</span>(int j=coin[i].w;j&lt;=sum;j++)</div><div class="line">				dp[j]=min(dp[j],dp[j-coin[i].w]+coin[i].p);</div><div class="line">		<span class="keyword">if</span>(dp[sum]!=Inf)</div><div class="line">			cout&lt;&lt;<span class="string">"The minimum amount of money in the piggy-bank is "</span>&lt;&lt;dp[sum]&lt;&lt;<span class="string">"."</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"This is impossible."</span>&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>与完全背包类似。dp的初始化为long int的最大值，dp[0]需初始化为0.另外把状态方程中的max换成min。最后判断dp[sum]的值是否为Inf，若等于则说明没有这样的最小<br>值。</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于把最优解变成了求最小值，所以dp的初始化一定注意，要初始化为一个很大的数才行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DP问题专题二 01背包专题]]></title>
      <url>http://xuboming8.github.io/2016/08/30/DP%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98%E4%BA%8C-01%E8%83%8C%E5%8C%85%E4%B8%93%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="01背包巧用与强化"><a href="#01背包巧用与强化" class="headerlink" title="01背包巧用与强化"></a>01背包巧用与强化</h1><h2 id="ACM-HDOJ-2602-01背包水题"><a href="#ACM-HDOJ-2602-01背包水题" class="headerlink" title="ACM-HDOJ 2602(01背包水题)"></a>ACM-HDOJ 2602(01背包水题)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141259952.png" alt=""></p>
<p><strong>Input</strong><br><a id="more"></a><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141260004.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141260041.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14714126008.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147141260113.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>01背包水题。只是把物品变成了骨头。</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int t;</div><div class="line">	cin&gt;&gt;t;</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		int value[1050],cost[1050],dp[1050],bag,n;</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		cin&gt;&gt;n&gt;&gt;bag;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			cin&gt;&gt;value[i];</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			cin&gt;&gt;cost[i];</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			<span class="keyword">for</span>(int v=bag;v&gt;=cost[i];v--)</div><div class="line">				dp[v]=max(dp[v],dp[v-cost[i]]+value[i]);</div><div class="line">		cout&lt;&lt;dp[bag]&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>参考DP专题一的01背包介绍，此题完全套状态方程。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>内循环逆序。</p>
<h2 id="ACM-HDOJ-2639-01背包第k优解"><a href="#ACM-HDOJ-2639-01背包第k优解" class="headerlink" title="ACM-HDOJ 2639(01背包第k优解)"></a>ACM-HDOJ 2639(01背包第k优解)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14714290374.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147142903796.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147142903836.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147142903872.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147142903905.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>在2602题的基础上求第k优解。</p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">struct Node</div><div class="line">&#123;</div><div class="line">	int value,cost;</div><div class="line">&#125;node[1005];</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int t;</div><div class="line">	cin&gt;&gt;t;</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		int n,k,v,dp[1005][31]=&#123;0&#125;,a[31],b[31];</div><div class="line">		cin&gt;&gt;n&gt;&gt;v&gt;&gt;k;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			cin&gt;&gt;node[i].value;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			cin&gt;&gt;node[i].cost;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			<span class="keyword">for</span>(int j=v;j&gt;=node[i].cost;j--)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">for</span>(int d=1;d&lt;=k;d++)</div><div class="line">				&#123;</div><div class="line">					a[d]=dp[j-node[i].cost][d]+node[i].value;</div><div class="line">					b[d]=dp[j][d];</div><div class="line">				&#125;</div><div class="line">				int x,y,z;</div><div class="line">				x=y=z=1;</div><div class="line">				int a[d]=b[d]=-1;</div><div class="line">				<span class="keyword">while</span>(z&lt;=k &amp;&amp; (a[x]!=-1 || b[y]!=-1))</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(a[x]&gt;b[y])</div><div class="line">						dp[j][z]=a[x++];</div><div class="line">					<span class="keyword">else</span></div><div class="line">						dp[j][z]=b[y++];</div><div class="line">					<span class="keyword">if</span>(dp[j][z]!=dp[j][z-1])</div><div class="line">						z++;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		cout&lt;&lt;dp[v][k]&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>　　对于求次优解、第K优解类的问题，如果相应的最优解问题能写出状态转移方程、用动态规划解决，那么求次优解往往可以相同的复杂度解决，第K优解则比求最优解的复<br>杂度上多一个系数K。其基本思想是将每个状态都表示成有序队列，将状态转移方程中的max/min转化成有序队列的合并。这里仍然以01背包为例讲解一下。首先看01背包求<br>最优解的状态转移方程：f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}。如果要求第K优解，那么状态f[i][v]就应该是一个大小为K的数组f[i][v][1..K]。其中f[i][v][k]表<br>示前i个物品、背包大小为 v时，第k优解的值。“f[i][v]是一个大小为K的数组”这一句，熟悉C语言的同学可能比较好理解，或者也可以简单地理解为在原来的方程中加了一维。<br>显然f[i][v][1..K]这K个数是由大到小排列的，所以我们把它认为是一个有序队列。然后原方程就可以解释为：f[i][v]这个有序队列是由f[i-1][v]和f[i-1][v-c[i]]+w[i]这两<br>个有序队列合并得到的。有序队列f[i-1][v]即f[i-1][v][1..K]，f[i-1][v-c[i]]+w[i]则理解为在f[i-1][v-c[i]] [1..K]的每个数上加上w[i]后得到的有序队列.合并这两个有<br>序队列并将结果的前K项储存到f[i][v][1..K]中的复杂度是O(K)。最后的答案是f[N][V][K]。总的复杂度是O(VNK)。<br>　　为什么这个方法正确呢？实际上，一个正确的状态转移方程的求解过程遍历了所有可用的策略，也就覆盖了问题的所有方案。只不过由于是求最优解，所以其 它在任何一<br>个策略上达不到最优的方案都被忽略了。如果把每个状态表示成一个大小为K的数组，并在这个数组中有序的保存该状态可取到的前K个最优值。那么， 对于任两个状态的max<br>运算等价于两个由大到小的有序队列的合并。另外还要注意题目对于“第K优解”的定义，将策略不同但权值相同的两个方案是看作同一个解还是不同的解。如果是前者，则维护<br>有序队列时要保证队列里的数没有重复的。<br>　　用个形象的比喻吧：如果我想知道学年最高分，那么，我只要知道每个班级的最高分，然后统计一遍就可以了。如果我想知道学年前十呢？我必须要知道每个班的前十名。<br>大家在心里模拟一下，对，这就是本题核心的算法。两种决策，就可以看作这个学年只有两个班。<br>　　根据以上思路，将原来的dp[i]扩展成dp[i][j]表示背包容量用了i的第j优解。</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>分别使用a，b两个数组存储两种状态，再合并求最大值。</p>
<h2 id="ACM-HDOJ-2955-01背包巧用"><a href="#ACM-HDOJ-2955-01背包巧用" class="headerlink" title="ACM-HDOJ 2955(01背包巧用)"></a>ACM-HDOJ 2955(01背包巧用)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147145086533.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147145086591.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14714508672.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147145086628.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147145086676.png" alt=""></p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>小偷抢银行，给出银行的个数，每个银行中的存款和每个银行中被抓的概率，求出在小于给定概率的情况下抢得的最大值。</p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line">using namespace std;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int money;</div><div class="line">	double caught;</div><div class="line">&#125;bank[105];</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int t;</div><div class="line">	cin&gt;&gt;t;</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		int n,sum=0;</div><div class="line">		double p,dp[10005];</div><div class="line">		cin&gt;&gt;p&gt;&gt;n;</div><div class="line">		p=1-p;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			cin&gt;&gt;bank[i].money&gt;&gt;bank[i].caught;</div><div class="line">			bank[i].caught=1-bank[i].caught;</div><div class="line">			sum+=bank[i].money;</div><div class="line">		&#125;</div><div class="line">		memset(dp,0.0,sizeof(dp));</div><div class="line">		dp[0]=1.0;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">			<span class="keyword">for</span>(int j=sum;j&gt;=bank[i].money;j--)</div><div class="line">				dp[j]=max(dp[j],dp[j-bank[i].money]*bank[i].caught);</div><div class="line">		<span class="keyword">for</span>(int i=sum;i&gt;=0;i--)</div><div class="line">			<span class="keyword">if</span>(dp[i]&gt;p)</div><div class="line">			&#123;</div><div class="line">				cout&lt;&lt;i&lt;&lt;endl;</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>1、抢n个银行，不被抓，是每次都不被抓，用乘法原理处理每次不被抓的概率。<br>2、转化为01背包：将所有银行的总钱数当做背包的容积v，将不被抓的概率当做cost[i]，<br>在一般的01背包中都是加上cost[i] ，这里由于是乘法原理，所以应该是转化为乘法。<br>这样，传统的01背包累加问题变成了垒乘。<br>3、状态转移方程：dp[j]=max(dp[j],dp[j-bank[i].money]*bank[i].caught)<br>dp[j]表示抢j钱时的最大不被抓概率。</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>此题乍看与背包问题无关，其实是变相的01背包问题。由于dp求得的是最大的不被抓概率，所以程序中的p和bank[i].caught必须转化为不被抓的概率，即用1减去本身。<br>最后在判断的时候需注意i从sum开始，即从最大背包容量开始判断，每个容量对应的最大不被抓概率是否满足小于给定的概率，若满足则立刻输出并结束循环，保证输出<br>的是最优化值。dp的初始化也要注意给dp[0]赋为1，因为当抢钱数为0是不会被抓。</p>
<h2 id="ACM-HDOJ-3466-01背包排序"><a href="#ACM-HDOJ-3466-01背包排序" class="headerlink" title="ACM-HDOJ 3466(01背包排序)"></a>ACM-HDOJ 3466(01背包排序)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147150959198.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147150959256.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14715095929.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147150959324.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147150959358.png" alt=""></p>
<h3 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h3><p>用钱买商品，每件物品只有在大于特定资金才能进行交易，在总资金一定的情况下求获得的最大价值。</p>
<h3 id="参考AC代码-3"><a href="#参考AC代码-3" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int p,q,v,cha;</div><div class="line">&#125;a[550];</div><div class="line">int cmp(node A,node B)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> A.cha&lt;B.cha;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n,m,dp[5050];</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			cin&gt;&gt;a[i].p&gt;&gt;a[i].q&gt;&gt;a[i].v;</div><div class="line">			a[i].cha=a[i].q<span class="_">-a</span>[i].p;</div><div class="line">		&#125;</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		sort(a,a+n,cmp);</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">			<span class="keyword">for</span>(int j=m;j&gt;=a[i].q;j--)</div><div class="line">				dp[j]=max(dp[j],dp[j<span class="_">-a</span>[i].p]+a[i].v);</div><div class="line">		cout&lt;&lt;dp[m]&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>此道01背包问题需要sort排序，理由如下：<br>有两个物品(p1,q1,v1),(p2,q2,v2)，然后物品1先放的话，物品2就可以借助物品1产生的各种状态来进行下一步转移，而如果物品2的q2值过高，在这个[q2,m]的区间内都<br>不存在物品1造成的新状态的话，那么物品1的状态就没有得到利用。而如果交换顺序，先放了物品2，那么显然物品1就可以利用物品2产生的新状态。<br>所以物品1能从物品2转移的状态区间其实是[min(q1+p2,m),m]，物品2能从物品1转移的状态区间是[min(q2+p1,m),m]。所以尽可能地复用这个区间，让区间小的先来，<br>区间大的后来，这样排序之后所有物品都能从前面的物品得到新状态进行转移。<br>先买A，至少需要p1+q2，先买B，至少需要p2+q1;若A q2-p2;即差值大的先买，所以先买的应排到后面。<br>而普通的01背包之所以不需要排序,是因为p1==q1,p2==q2,排序跟不排是一回事。这一类的dp题要注意后效性是否存在，如果存在通过改变顺序之类的办法来取消后效性。<br>在ACM-HDOJ 2546题中，qi恒定为5，所以也是需要排序的。</p>
<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>因为01背包的内循环是逆序，所以在先买差值大的情况下，a数组应从小到大进行排列，确保在循环中先从末尾的最大买起。</p>
<h2 id="ACM-HDOJ-1864-01背包变形"><a href="#ACM-HDOJ-1864-01背包变形" class="headerlink" title="ACM-HDOJ 1864(01背包变形)"></a>ACM-HDOJ 1864(01背包变形)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147157839619.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147157839674.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147157839708.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14715783975.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147157839789.png" alt=""></p>
<h3 id="参考AC代码-4"><a href="#参考AC代码-4" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line">using namespace std;</div><div class="line">int dp[3000050];</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int money[31],fund2;</div><div class="line">	int num1,num2;</div><div class="line">	double sum1,fund;</div><div class="line">	char ch;</div><div class="line">	<span class="keyword">while</span>(scanf(<span class="string">"%lf%d"</span>,&amp;sum1,&amp;num1)&amp;&amp;num1)</div><div class="line">	&#123;</div><div class="line">		int sum=int(sum1*100);</div><div class="line">		memset(money,0,sizeof(money));</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		int l=0;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;num1;i++)</div><div class="line">		&#123;</div><div class="line">			scanf(<span class="string">"%d"</span>,&amp;num2);</div><div class="line">			int a=0,b=0,c=0,flag=1;</div><div class="line">			<span class="keyword">while</span>(num2--)</div><div class="line">			&#123;</div><div class="line">				scanf(<span class="string">" %c:%lf"</span>,&amp;ch,&amp;fund);</div><div class="line">				fund2=int(fund*100);</div><div class="line">				<span class="keyword">if</span>(ch==<span class="string">'A'</span>&amp;&amp;a+fund2&lt;=60000)</div><div class="line">					a+=fund2;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'B'</span>&amp;&amp;b+fund2&lt;=60000)</div><div class="line">					b+=fund2;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'C'</span>&amp;&amp;c+fund2&lt;=60000)</div><div class="line">					c+=fund2;</div><div class="line">				<span class="keyword">else</span></div><div class="line">					flag=0;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(a+b+c&lt;=100000 &amp;&amp; a&lt;=60000 &amp;&amp; b&lt;=60000 &amp;&amp; c&lt;=60000 &amp;&amp; flag)</div><div class="line">				money[l++]=a+b+c;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;=l;i++)</div><div class="line">			<span class="keyword">for</span>(int j=sum;j&gt;=money[i];j--)</div><div class="line">				dp[j]=max(dp[j],dp[j-money[i]]+money[i]);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,dp[sum]/100.0);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>依次搜索每张发票的信息，判断是否满足题给的三个条件：只有ABC三类，ABC单项小于600，ABC和小于1000.若均满足后存入money数组，之后对该数组进行01背包的<br>操作后即可得出结果。</p>
<h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于该题要求有关数据均要保留两位小数，所以为了简化操作，把所有的小数均扩大100倍后进行整型操作，最后只需要把结果在除以100.0即可。注意l的定义要在for循环之<br>外，因为money数组存放的是所有满足条件发票的总资金。只要有一个不是ABC类型的flag=0，不满足if判断直接进行下一张发票的判断。dp数组应该开到30×1000×100的<br>大小，防止数组越界。(多乘的100是因为扩大了100倍)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DP问题专题一(Dynamic Programming) 背包入门]]></title>
      <url>http://xuboming8.github.io/2016/08/30/DP%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98%E4%B8%80-Dynamic-Programming-%E8%83%8C%E5%8C%85%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="经典DP-背包问题"><a href="#经典DP-背包问题" class="headerlink" title="经典DP 背包问题"></a>经典DP 背包问题</h1><h2 id="三种基本背包问题的概念"><a href="#三种基本背包问题的概念" class="headerlink" title="三种基本背包问题的概念"></a>三种基本背包问题的概念</h2><p><strong>01背包(Zero one pack)：</strong><br>有N件物品和一个容量为V的背包， 每种物品均只有一件。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。<br><strong>完全背包(Complete Pack)：</strong><br>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，<br>且价值总和最大。<br><strong>多重背包(Multiple Pack)：</strong><br>有N种物品和一个容量为V的背包，第i种物品最多有n[i]件可用。每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且<br>价值总和最大。<br><a id="more"></a></p>
<h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>1背包（ZeroOnePack）: 有N件物品和一个容量为V的背包，每种物品均只有一件。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。<br>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。<br>用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。<br>其状态转移方程是：</p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147124545174.png" alt=""><br></div><br>把这个过程理解下：<br>在前i件物品放进容量v的背包时，它有两种情况</p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147124545224.png" alt=""><br></div><br>PS：第二种是如果第i件放进去，那么在容量v-c[i]里就要放进前i-1件物品<br>最后比较第一种与第二种所得价值的大小，哪种相对大，f[i][v]的值就是哪种。<br>这里是用二维数组存储的，可以把空间优化，用一维数组存储。<br>代码如下：(外循环正序 内循环逆序 使f[v]和f[v-c[i]]+w[i]表示前一状态的价值)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i=1..N</div><div class="line">   <span class="keyword">for</span> v=V..0</div><div class="line">        f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;</div></pre></td></tr></table></figure></p>
<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>完全背包(CompletePack): 有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费<br>用总和不超过背包容量，且价值总和最大。<br>完全背包按其思路仍然可以用一个二维数组来写出：（两种状态方程）</p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147125503938.png" alt=""><br></div></p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147256532522.png" alt=""><br></div><br>同样的它也可以用一维数组来表示<br>代码如下：(外循环和内循环均正序 保证使f[v]和f[v-c[i]]+w[i]表示当前状态的价值)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i=1..N</div><div class="line">    <span class="keyword">for</span> v=0..V</div><div class="line">        f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;</div></pre></td></tr></table></figure></p>
<h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p>多重背包(MultiplePack): 有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和<br>不超过背包容量，且价值总和最大。<br>其状态转移方程是：</p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147125503989.png" alt=""><br></div><br>多重背包问题可以转化为01背包问题：(提供如下模版)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">void ZeroOnePack(int value,int weight)  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">for</span>(int v=m;v&gt;=value;v--)  </div><div class="line">        dp[v]=max(dp[v-value]+weight,dp[v]);  </div><div class="line">&#125;  </div><div class="line">void CompletePack(int value,int weight)  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">for</span>(int v=value;v&lt;=m;v++)  </div><div class="line">        dp[v]=max(dp[v],dp[v-value]+weight);  </div><div class="line">&#125;  </div><div class="line">void MultiPack(int value,int weight,int amount)  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>(value*amount&gt;=m)  </div><div class="line">    &#123;  </div><div class="line">        CompletePack(value,weight);  </div><div class="line">        <span class="built_in">return</span> ;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(int k=1;k&lt;amount;k*=2)  </div><div class="line">    &#123;  </div><div class="line">        ZeroOnePack(k*value,k*weight);  </div><div class="line">        amount-=k;  </div><div class="line">    &#125;  </div><div class="line">    ZeroOnePack(amount*value,amount*weight);  </div><div class="line">&#125;</div><div class="line">value表示每件的花费 weight表示每件的价值 amount表示每件可取的数量 m表示最大背包容量</div><div class="line">具体在1059题中使用</div></pre></td></tr></table></figure></p>
<p>也可变形为以下模版，性质不变：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">void ZeroOnePack(int value,int cost)  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">for</span>(int v=m;v&gt;=cost;v--)  </div><div class="line">        dp[v]=max(dp[v-value]+cost,dp[v]);  </div><div class="line">&#125;  </div><div class="line">void CompletePack(int value,int cost)  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">for</span>(int v=cost;v&lt;=m;v++)  </div><div class="line">        dp[v]=max(dp[v],dp[v-value]+cost);  </div><div class="line">&#125;  </div><div class="line">void MultiPack(int value,int cost,int amount)  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>(value*amount&gt;=m)  </div><div class="line">    &#123;  </div><div class="line">        CompletePack(value,cost);  </div><div class="line">        <span class="built_in">return</span> ;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(int k=1;k&lt;amount;k*=2)  </div><div class="line">    &#123;  </div><div class="line">        ZeroOnePack(k*value,k*cost);  </div><div class="line">        amount-=k;  </div><div class="line">    &#125;  </div><div class="line">    ZeroOnePack(amount*value,amount*cost);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h2><p>假如给了我们价值为2，数量是10的物品，我们应该把10给拆开，首先算出2^0=1,2^1=2,2^2=4,2^3=8。好了那么现在，1+2+4=7<10,1+2+4+8=15>10,所以剩下<br>的数字应为10-7=3。最后组成10的数字就求得为1，2，4，3。由这4个数字可以表示1-10里的任意一个数，所以这批物品就可以表示为价值为2，4，6，8的四种货物，总价<br>值依然为20，问题就得到了简化。</10,1+2+4+8=15></p>
<h3 id="二维划为一维数组的正逆序问题"><a href="#二维划为一维数组的正逆序问题" class="headerlink" title="二维划为一维数组的正逆序问题"></a>二维划为一维数组的正逆序问题</h3><p>鉴于上面的分析，在01背包中应采取逆序遍历，而在完全背包中应采取正向遍历，原因参考下列博客：<br><a href="http://blog.csdn.net/xiajiawei0206/article/details/19933781" target="_blank" rel="external">由于该博主已经十分详细的分析了，这里就不在赘述</a><br>但上篇博客未牵涉到完全背包问题，所以做如下补充：<br>想想为什么P01中要按照v=V..0的逆序来循环。这是因为要保证第i次循环中的状态f[i][v]是由状态f[i-1][v-c[i]]递推而来。换句话说，这正是为了保证每件物品只选一次，<br>保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果f[i-1][v-c[i]]。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加<br>选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果f[i][v-c[i]]，所以就可以并且必须采用v= 0..V的顺序循环。这就是这个简单的程序为何成立的<br>道理。</p>
<h2 id="ACM-HDOJ-2546-01背包"><a href="#ACM-HDOJ-2546-01背包" class="headerlink" title="ACM-HDOJ 2546(01背包)"></a>ACM-HDOJ 2546(01背包)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14713396409.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147133964134.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147133964171.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147133964204.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147133964245.png" alt=""></p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">int cmp(int a,int b)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> a&lt;b;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n &amp;&amp; n!=0)</div><div class="line">	&#123;</div><div class="line">		int price[1050]=&#123;0&#125;,m,dp[1050]=&#123;0&#125;;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">			cin&gt;&gt;price[i];</div><div class="line">		cin&gt;&gt;m;</div><div class="line">		<span class="keyword">if</span>(m&lt;5)</div><div class="line">		&#123;</div><div class="line">			cout&lt;&lt;m&lt;&lt;endl;</div><div class="line">			<span class="built_in">continue</span>;</div><div class="line">		&#125;</div><div class="line">		sort(price+1,price+1+n,cmp);</div><div class="line">		int Max=price[n];</div><div class="line">		m-=5;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;n;i++)</div><div class="line">			<span class="keyword">for</span>(int j=m;j&gt;=price[i];j--)</div><div class="line">				dp[j]=max(dp[j],dp[j-price[i]]+price[i]);</div><div class="line">		cout&lt;&lt;(m-dp[m])+(5-Max)&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>典型的01背包问题。但在使用状态方程前应先做如下操作：由于卡里的余额必须要大于5，所以可以做先拿5元买最贵的菜，接着卡里剩余m-5使用01背包问题求出最大价<br>值（这是逆向思维，若换成正序的情形更容易理解，相当于先买除了最贵以外的菜，确保买完后卡里的钱大于5元而且最少，最接近5元，接着用这5元去买最贵的菜，卡<br>里剩下的负值就是最小的余额）。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>虽然题目类型是典型的01背包问题，但是不代表可以直接使用状态方程求解，在经过一系列的操作后才可以使用。如本题在使用状态方程前需先用5元去买最贵的物品。<br>至于为什么要排序，详见DP专题二————ACM-HDOJ 3466题思路</p>
<h2 id="ACM-HDOJ-1963-完全背包"><a href="#ACM-HDOJ-1963-完全背包" class="headerlink" title="ACM-HDOJ 1963(完全背包)"></a>ACM-HDOJ 1963(完全背包)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147135793769.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147135793825.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147135793857.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147135793898.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147135793932.png" alt=""></p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int cost,reward;</div><div class="line">&#125;a[20];</div><div class="line">int dp[1000];</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int t;</div><div class="line">	cin&gt;&gt;t;</div><div class="line">	<span class="keyword">while</span>(t--)</div><div class="line">	&#123;</div><div class="line">		int sum,year,n;</div><div class="line">		cin&gt;&gt;sum&gt;&gt;year;</div><div class="line">		cin&gt;&gt;n;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			cin&gt;&gt;a[i].cost&gt;&gt;a[i].reward;</div><div class="line">			a[i].cost/=1000;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=year;i++)</div><div class="line">		&#123;</div><div class="line">			int s=sum/1000;</div><div class="line">			memset(dp,0,sizeof(dp));</div><div class="line">			<span class="keyword">for</span>(int j=1;j&lt;=n;j++)</div><div class="line">				<span class="keyword">for</span>(int k=a[j].cost;k&lt;=s;k++)</div><div class="line">					dp[k]=max(dp[k],dp[k<span class="_">-a</span>[j].cost]+a[j].reward);</div><div class="line">			sum+=dp[s];</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;sum&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>因为每种物品可以进行多次购买，所以可以看作完全背包问题。但是要注意的是，由于本金可能会很大，所以我们要对背包的大小进行压缩，值得注意的是，题目已经说了本<br>金与物品的购买价格都是1000的倍数，所以我们可以将他们都除以1000来进行压缩，然后就是一道完全背包模板题了。</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>要对背包的大小进行压缩。</p>
<h2 id="ACM-HDOJ-1059-多重背包"><a href="#ACM-HDOJ-1059-多重背包" class="headerlink" title="ACM-HDOJ 1059(多重背包)"></a>ACM-HDOJ 1059(多重背包)</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147105616483.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147105616587.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147105616623.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147105616656.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14710561669.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>有一堆钻石，有6种不同的价值（1…6），现在告诉你每种的数量，问你能不能把这堆钻石按总的价值平均分开。</p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;cstdio&gt; </span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">int data[7];</div><div class="line">int dp[60001];</div><div class="line">int m;</div><div class="line">void ZeroOnePack(int value,int weight)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int v=m;v&gt;=value;v--)</div><div class="line">		dp[v]=max(dp[v],dp[v-value]+weight);</div><div class="line">&#125;</div><div class="line">void CompletePack(int value,int weight)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int v=value;v&lt;=m;v++)</div><div class="line">		dp[v]=max(dp[v],dp[v-value]+weight);</div><div class="line">&#125;</div><div class="line">void MultiPack(int value,int weight,int amount)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(value*amount&gt;=m)</div><div class="line">	&#123;</div><div class="line">		CompletePack(value,weight);</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(int k=1;k&lt;amount;k*=2)</div><div class="line">	&#123;</div><div class="line">		ZeroOnePack(k*value,k*weight);</div><div class="line">		amount-=k;</div><div class="line">	&#125;</div><div class="line">	ZeroOnePack(amount*value,amount*weight);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int count=1;</div><div class="line">	<span class="keyword">while</span>(1)</div><div class="line">	&#123;</div><div class="line">		int sum=0;</div><div class="line">		bool mark=<span class="literal">true</span>;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=6;i++)</div><div class="line">		&#123;</div><div class="line">			cin&gt;&gt;data[i];</div><div class="line">			sum+=data[i]*i;</div><div class="line">			<span class="keyword">if</span>(data[i])</div><div class="line">				mark=<span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(mark)</div><div class="line">			<span class="built_in">break</span>;</div><div class="line">		cout&lt;&lt;<span class="string">"Collection #"</span>&lt;&lt;count++&lt;&lt;<span class="string">":"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">if</span>(sum&amp;1)</div><div class="line">		&#123;</div><div class="line">			cout&lt;&lt;<span class="string">"Can't be divided."</span>&lt;&lt;endl;</div><div class="line">			cout&lt;&lt;endl;</div><div class="line">			<span class="built_in">continue</span>;</div><div class="line">		&#125;</div><div class="line">		m=sum&gt;&gt;1;</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=6;i++)</div><div class="line">			<span class="keyword">if</span>(data[i])</div><div class="line">				MultiPack(i,i,data[i]);</div><div class="line">		<span class="keyword">if</span>(dp[m]==m)</div><div class="line">			cout&lt;&lt;<span class="string">"Can be divided."</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"Can't be divided."</span>&lt;&lt;endl;</div><div class="line">		cout&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>只要能把钻石总价值的一半放进背包中，就满足题意。首先求出sum，并sum的一半赋给m作为背包最大容量。接着6个位置中每个位置进行判断，若不为0则进入模版进<br>行判断。01背包和完全背包军用了一维数组形式的状态转移方程，注意01背包中循环是逆序，完全背包是正序即可。多重背包中，如果总价值大于背包的最大容量，那<br>么就可以等效为完全背包问题。否则进行二进制优化，优化的结果均带入01背包进行计算，最后得出的dp[m]与m进行判断。</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>若总价值为奇数则可以直接剪枝，用sum&amp;1的二进制方法比sum%2的方法更简洁。sum&amp;1为0说明是偶数，为1说明是奇数。同样m=sum/2也可以用sum&gt;&gt;=1来表示，把<br>二进制数像右移动一位相当于缩小了2^1倍。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[经典的搜索类游戏]]></title>
      <url>http://xuboming8.github.io/2016/08/30/%E7%BB%8F%E5%85%B8%E7%9A%84%E6%90%9C%E7%B4%A2%E7%B1%BB%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<h1 id="连连看-推箱子-蜘蛛纸牌"><a href="#连连看-推箱子-蜘蛛纸牌" class="headerlink" title="连连看 推箱子 蜘蛛纸牌"></a>连连看 推箱子 蜘蛛纸牌</h1><h2 id="连连看"><a href="#连连看" class="headerlink" title="连连看"></a>连连看</h2><p><strong>ACM-HDOJ 1175</strong></p>
<p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147076014848.png" alt=""></p>
<p><strong>Input</strong><br><a id="more"></a><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147076014895.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147076014932.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147076014964.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147076015004.png" alt=""></p>
<h3 id="参考AC代码（1）：深搜-剪枝"><a href="#参考AC代码（1）：深搜-剪枝" class="headerlink" title="参考AC代码（1）：深搜+剪枝"></a>参考AC代码（1）：深搜+剪枝</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;cstring&gt;  </span></div><div class="line">using namespace std;   </div><div class="line">const int MAX = 1003;  </div><div class="line">const int dirx[5] = &#123;0,0,1,0,-1&#125;;</div><div class="line">const int diry[5] = &#123;0,1,0,-1,0&#125;;  </div><div class="line">int map[MAX][MAX],flag[MAX][MAX];</div><div class="line">int n,m,bx,by;  </div><div class="line">bool mark;   </div><div class="line">void dfs(int x,int y,int cnt,int dir)</div><div class="line">&#123;  </div><div class="line">    int i,tx,ty;</div><div class="line">    <span class="keyword">if</span>(x&lt;1 || y&lt;1 || x&gt;n || y&gt;m || cnt&gt;2)</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">    //注意下面几个剪枝的顺序，顺序搞错了就会出错，因为最后一个元素非0  </div><div class="line">    <span class="keyword">if</span>(x==bx &amp;&amp; y==by)</div><div class="line">	&#123; </div><div class="line">        mark = <span class="literal">true</span>;  </div><div class="line">        <span class="built_in">return</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span>(map[x][y]!=0)</div><div class="line">		<span class="built_in">return</span>;  </div><div class="line">    <span class="keyword">if</span>(flag[x][y]!=-1 &amp;&amp; flag[x][y]&lt;cnt)</div><div class="line">		<span class="built_in">return</span>;  </div><div class="line">    flag[x][y] = cnt;  </div><div class="line">    <span class="keyword">for</span>(i=1;i&lt;=4;i++)</div><div class="line">	&#123;  </div><div class="line">        tx = x + dirx[i];  </div><div class="line">        ty = y + diry[i];  </div><div class="line">        <span class="keyword">if</span>(dir!=i) </div><div class="line">            dfs(tx,ty,cnt+1,i);  </div><div class="line">		<span class="keyword">else</span></div><div class="line">            dfs(tx,ty,cnt,i);   </div><div class="line">    &#125;  </div><div class="line">&#125;    </div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;  </div><div class="line">    int i,j,t,ax,ay;  </div><div class="line">    <span class="keyword">while</span>(scanf(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">	&#123;  </div><div class="line">        <span class="keyword">if</span>(n==0 &amp;&amp; m==0)</div><div class="line">			<span class="built_in">break</span>;  </div><div class="line">        <span class="keyword">for</span>(i=1;i&lt;=n;++i) </div><div class="line">            <span class="keyword">for</span>(j=1;j&lt;=m;++j)</div><div class="line">                scanf(<span class="string">"%d"</span>,&amp;map[i][j]);  </div><div class="line">        scanf(<span class="string">"%d"</span>,&amp;t);  </div><div class="line">        <span class="keyword">while</span>(t--)</div><div class="line">		&#123;  </div><div class="line">            memset(flag,-1,sizeof(flag));  </div><div class="line">            scanf(<span class="string">"%d %d %d %d"</span>,&amp;ax,&amp;ay,&amp;bx,&amp;by);  </div><div class="line">            mark = <span class="literal">false</span>;  </div><div class="line">            <span class="keyword">if</span>(map[ax][ay]!=map[bx][by] || map[ax][ay]==0 || map[bx][by]==0)     //剪枝</div><div class="line">			&#123;  </div><div class="line">                <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);  </div><div class="line">                <span class="built_in">continue</span>;  </div><div class="line">            &#125;  </div><div class="line">            flag[ax][ay] = 0;  </div><div class="line">            <span class="keyword">for</span>(i=1;i&lt;=4;i++) </div><div class="line">                dfs(ax+dirx[i],ay+diry[i],0,i); </div><div class="line">            <span class="keyword">if</span>(mark)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);  </div><div class="line">			<span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);   </div><div class="line">        &#125;  </div><div class="line">    &#125;   </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考AC代码（2）：广搜-优化队列"><a href="#参考AC代码（2）：广搜-优化队列" class="headerlink" title="参考AC代码（2）：广搜+优化队列"></a>参考AC代码（2）：广搜+优化队列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;cstring&gt;</span></div><div class="line"><span class="comment">#include &lt;queue&gt;</span></div><div class="line">using namespace std;</div><div class="line">const int S = 1010;</div><div class="line">int n,m;</div><div class="line">int q,sx,sy,dx,dy;</div><div class="line">int map[S][S],flag[S][S];</div><div class="line">const int dirx[4]=&#123;-1,1,0,0&#125;,diry[4]=&#123;0,0,-1,1&#125;;</div><div class="line">typedef struct </div><div class="line">&#123;</div><div class="line">    int x,y,dir,turn;</div><div class="line">&#125;point;</div><div class="line">queue&lt;point&gt;que;</div><div class="line">inline bool check(point &amp;P)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(P.x&gt;=1&amp;&amp;P.x&lt;=n&amp;&amp;P.y&gt;=1&amp;&amp;P.y&lt;=m) </div><div class="line">		<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">bool <span class="function"><span class="title">bfs</span></span>()</div><div class="line">&#123;</div><div class="line">    point cur,next;</div><div class="line">    <span class="keyword">while</span>(que.size())</div><div class="line">	&#123;</div><div class="line">        cur = que.front();</div><div class="line">        que.pop();</div><div class="line">        <span class="keyword">if</span>(cur.x==dx&amp;&amp;cur.y==dy) </div><div class="line">			<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(int i=0;i&lt;4;i++)</div><div class="line">		&#123;</div><div class="line">            <span class="keyword">if</span>(cur.dir!=i)</div><div class="line">			&#123;</div><div class="line">                next.dir=i;</div><div class="line">                next.turn=cur.turn+1;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">                next.dir=cur.dir;</div><div class="line">                next.turn=cur.turn;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(next.turn&gt;2) </div><div class="line">				<span class="built_in">continue</span>;                </div><div class="line">            next.x=cur.x+dirx[i],next.y=cur.y+diry[i];</div><div class="line">            <span class="keyword">if</span>(check(next)&amp;&amp;(!map[next.x][next.y]||(next.x==dx&amp;&amp;next.y==dy))&amp;&amp;flag[next.x][next.y]&gt;=next.turn)</div><div class="line">			&#123;</div><div class="line">                que.push(next);</div><div class="line">                flag[next.x][next.y]=next.turn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(scanf(<span class="string">"%d %d"</span>,&amp;n,&amp;m)&amp;&amp;(n||m))</div><div class="line">	&#123;</div><div class="line">        <span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">            <span class="keyword">for</span>(int j=1;j&lt;=m;j++) </div><div class="line">				scanf(<span class="string">"%d"</span>,&amp;map[i][j]);</div><div class="line">        scanf(<span class="string">"%d"</span>,&amp;q);</div><div class="line">        <span class="keyword">while</span>(q--)</div><div class="line">		&#123;</div><div class="line">            scanf(<span class="string">"%d %d %d %d"</span>,&amp;sx,&amp;sy,&amp;dx,&amp;dy);</div><div class="line">            <span class="keyword">if</span>((map[sx][sy]!=map[dx][dy])||!map[sx][sy]||!map[dx][dy]||(sx==dx&amp;&amp;sy==dy))</div><div class="line">			&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">                <span class="built_in">continue</span>;</div><div class="line">			&#125;</div><div class="line">            <span class="keyword">while</span>(que.size()) </div><div class="line">				que.pop();</div><div class="line">            memset(flag,1,sizeof(flag));</div><div class="line">            point start;</div><div class="line">            start.x=sx,start.y=sy,start.turn=0;</div><div class="line">            <span class="keyword">for</span>(int i=0;i&lt;4;i++)</div><div class="line">			&#123;</div><div class="line">                start.dir=i;</div><div class="line">                que.push(start);</div><div class="line">            &#125;</div><div class="line">            flag[sx][sy]=0;</div><div class="line">            <span class="keyword">if</span>(bfs()) </div><div class="line">				<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">            <span class="keyword">else</span> </div><div class="line">				<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>此类型为典型的搜索类题型，使用DFS或BFS均可以解决问题，再搭配优化队列或剪枝可以避免超时，超内存，减少运算复杂度。<br>方法一使用了深搜+剪枝：<br>使用数组map来储存每个位置，0代表该位置为空。数组flag作为标志数组，用来判断每个位置是否走过，用来存放到达每个点的最优化拐弯次数，并且初始化为-1。<br>如果进行判断的2个点不相等，或者2个点中任何一个点为空，或者2个点在同一个位置，那么直接剪枝输出NO。flag在第一个点位置的值设为0。接着开始移动起点<br>并进入dfs。首先如果越界或者cnt（记录转弯次数）大于2，直接剪枝，若到达终点直接返回true，如果map中该位置不为0，剪枝（空位才能走，若下一步是终点的<br>情况已经在上一步返回true结束循环了），若flag中存放的值不为-1（不等于-1说明该点已经走过，需要进行下一步判断）并且flag在改点的值小于cnt（flag记录<br>的是最优化拐弯次数，如果都小于当前可以进行的拐弯次数，那么不满足题意），剪枝。把cnt的值赋给该位置的flag。接下来继续进行移动，若dir（记录该点的方<br>向）和i（下一步的方向）相等，那么继续进入dfs进行下一步判断，此时代入的参数cnt不变（拐弯字数未变），i（下一步的方向）。若dir！=i，说明该点进行了拐<br>弯操作，那么代入的参数中cnt需要+1，继续进入dfs循环。如果第一个方向没有找到结果，那么回到主函数的for循环进行第二个方向的判断。<br>方法二使用了广搜+优化队列：<br>与方法一类似，下面只叙述不一样的部分。该方法采用了优化队列，开始是先把4个方向的结构体变量start存入队列，进入bfs进行判断，与方法一的的for循环类似，都<br>是可以保证在一个方向无法满足题意的情况下可以从起点开始进行下一方向的判断。接着把队列顶端的元素赋给cur，接着出队列，接着再用一个for循环进行移动，此时<br>判断i与que.dir是否相等，若相等则说明为拐弯，next.dir等于cur.dir，next.turn等于cur.turn，若不相等说明进行了拐弯，next.dir与目前的i保持一致，next.turn<br>变为cur.turn+1。接着进行一系列的判断（与方法一类似 首先保证未越界，其次地图上该点等于0可走，或者下一步已经到了终点，最后flag存放的最优化拐弯次数要大<br>于等于目前可以进行的拐弯次数turn）后若next满足题意，则next进队列，flag存放这一位置的最优化拐弯次数。</p>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p>由于方法略有不同，而且剪枝的顺序也不同，所以两段代码在有些方面需要注意：<br>第一段代码不需要判断flag存放的拐弯数是否大于2剪枝，因为在第一步的时候已经判断cnt如果大于2剪枝。并且在21行的代码中不需要判断下一个步是否到达终点。有<br>人可能会问，地图上除了为0的点可以走之外，如果下一步到了终点的话也是可行的，这个判断是对的，但是在前面的剪枝中已经判断如果到达了终点后直接返回true，<br>并不会执行下一步，换言之，如果程序执行到了第21行，那么下一步必然不可能到终点。第二段代码中也并不需要额外判断flag大于2剪枝，因为在for循环中已经判断<br>若turn大于2后直接continue进入下一循环。并且在这一段代码中必须判断下一步map的点为0或者是否为终点，这是由于该代码是在进行了移动后再进行判断的，没有<br>像第一段代码是先判断后移动，必须要注意，否则会WA。</p>
</blockquote>
<h2 id="推箱子"><a href="#推箱子" class="headerlink" title="推箱子"></a>推箱子</h2><p><strong>ACM-HDOJ 1254</strong></p>
<p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147081340477.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147081340537.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14708134057.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147081340603.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147081340639.png" alt=""></p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;  </span></div><div class="line"><span class="comment">#include&lt;cstring&gt;  </span></div><div class="line"><span class="comment">#include&lt;queue&gt;  </span></div><div class="line">using namespace std;   </div><div class="line">int Map[8][8];  </div><div class="line">bool vis[8][8][4],us[8][8];//标记箱子推过的方向  人走过的点  </div><div class="line">int dir[4][2]=&#123;0,1,0,-1,1,0,-1,0&#125;;  </div><div class="line">struct node  </div><div class="line">&#123;  </div><div class="line">    int x,y;  </div><div class="line">    int xx,yy;  </div><div class="line">    int t;  </div><div class="line">&#125;st,ed;  </div><div class="line">struct edg  </div><div class="line">&#123;  </div><div class="line">    int x,y;  </div><div class="line">&#125;a,b;  </div><div class="line">int n,m;  </div><div class="line">queue&lt;node&gt;q;   </div><div class="line">void Bfs()  //对于箱子  广搜人能将箱子像哪个方向推  </div><div class="line">&#123;  </div><div class="line">    queue&lt;edg&gt;qq;  </div><div class="line">    memset(us,<span class="literal">false</span> ,sizeof(us));  </div><div class="line">    qq.push(a);  </div><div class="line">    <span class="keyword">while</span>(qq.size())  </div><div class="line">    &#123;  </div><div class="line">        a=qq.front();  </div><div class="line">        qq.pop();  </div><div class="line">        <span class="keyword">for</span>(int i=0;i&lt;4;i++)  </div><div class="line">        &#123;  </div><div class="line">            int xx,yy;  </div><div class="line">            xx=a.x+dir[i][0];  </div><div class="line">            yy=a.y+dir[i][1];  </div><div class="line">            <span class="keyword">if</span>(xx&gt;=0&amp;&amp;xx&lt;n&amp;&amp;yy&gt;=0&amp;&amp;yy&lt;m)  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(xx==st.x&amp;&amp;yy==st.y)  </div><div class="line">                &#123;  </div><div class="line">                    int x=st.x+dir[i][0],y=st.y+dir[i][1];  </div><div class="line">                    <span class="keyword">if</span>(x&gt;=0&amp;&amp;x&lt;n&amp;&amp;y&gt;=0&amp;&amp;y&lt;m)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="keyword">if</span>(!vis[x][y][i]&amp;&amp;Map[x][y]!=1)  //能推且到达的点不是墙  </div><div class="line">                        &#123;  </div><div class="line">                            ed.x=x;  </div><div class="line">                            ed.y=y;  </div><div class="line">                            ed.xx=xx;  </div><div class="line">                            ed.yy=yy;  </div><div class="line">                            ed.t=st.t+1;  </div><div class="line">                            q.push(ed);  </div><div class="line">                            vis[x][y][i]=<span class="literal">true</span> ;  </div><div class="line">                        &#125;  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!us[xx][yy]&amp;&amp;Map[xx][yy]!=1)  </div><div class="line">                &#123;  </div><div class="line">                    us[xx][yy]=<span class="literal">true</span> ;  </div><div class="line">                    b.x=xx;  </div><div class="line">                    b.y=yy;  </div><div class="line">                    qq.push(b);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> ;  </div><div class="line">&#125;   </div><div class="line">void <span class="function"><span class="title">bfs</span></span>()  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">while</span>(q.size()) q.pop();  </div><div class="line">    q.push(st);  </div><div class="line">    <span class="keyword">while</span>(q.size())  </div><div class="line">    &#123;  </div><div class="line">        st=q.front();  </div><div class="line">        q.pop();  </div><div class="line">        <span class="keyword">if</span>(Map[st.x][st.y]==3)  </div><div class="line">        &#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,st.t);  </div><div class="line">            <span class="built_in">return</span> ;  </div><div class="line">        &#125;  </div><div class="line">        a.x=st.xx;  </div><div class="line">        a.y=st.yy;  </div><div class="line">        Bfs();  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);  </div><div class="line">    <span class="built_in">return</span> ;  </div><div class="line">&#125;  </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int t;  </div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;t);  </div><div class="line">    <span class="keyword">while</span>(t--&amp;&amp;scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m))  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(int i=0;i&lt;n;i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">for</span>(int j=0;j&lt;m;j++)  </div><div class="line">            &#123;  </div><div class="line">                scanf(<span class="string">"%d"</span>,&amp;Map[i][j]);  </div><div class="line">                <span class="keyword">if</span>(Map[i][j]==2)  </div><div class="line">                    st.x=i,st.y=j;  </div><div class="line">                <span class="keyword">if</span>(Map[i][j]==4)  </div><div class="line">                    st.xx=i,st.yy=j;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        st.t=0;  </div><div class="line">        memset(vis,<span class="literal">false</span> ,sizeof(vis));  </div><div class="line">        bfs();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>由于此题存在判断人推箱子和箱子是否到终点两个状态，所以需要使用两个广搜互相嵌套，分别用来表示箱子的状态和人推箱子的状态，配上2个优化队列，可以确保人<br>走的路线和箱子走的路线为最优路线，符合题目所要求的最小移动次数。在主函数中分别把箱子的起点和人的起点用st记录下来，开始的移动次数为0，接着进入第一个<br>dfs函数。该函数是用来判断箱子是否达到了终点。若未到达终点则把现在人的位置赋给a，接着进入二个BFS函数。该函数是用来判断人推箱子的状态。先移动人，确保<br>把人移到箱子的位置，若未走到箱子的位置，那么根据数组us（初始化为false）存放元素的情况和不能走到墙上继续走下一步，接着把此时人的位置赋给b，并且压入队<br>列qq，直到人走到目前箱子的位置，记录下元素i的值，此时的箱子只能向i方向进行移动（推箱子的游戏中箱子只能和人的运动方向一致）。箱子移动的时候需判断vis<br>数组中存放的元素和移动的位置是否为墙。若箱子成功走出下一步，那么把此时人和箱子的位置情况全部赋给ed，接着把ed压入队列q，接着进入第一个bfs函数判断此<br>时的箱子是否到达了终点，若未到达继续进入第二个BFS函数进行下一步移动。</p>
</blockquote>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p>此题中的判断数组vis需要设置为三维数组，因为每个点都可以走1次以上，只有每个点都走过4个方向后该点才不能走。写出代码后可以用推到墙上只能顺着墙移动和推<br>到拐角后不能移动2个特殊情况进行验证。此题最关键的是要分清2个bfs的状态以及箱子只能和人的运动方向一致，所以先移动人后移动箱子。</p>
</blockquote>
<h2 id="蜘蛛纸牌"><a href="#蜘蛛纸牌" class="headerlink" title="蜘蛛纸牌"></a>蜘蛛纸牌</h2><p><strong>ACM-HDOJ 1584</strong></p>
<p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147090961577.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147090961617.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147090961654.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147090961686.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14709096172.png" alt=""></p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;math.h&gt;</span></div><div class="line"><span class="comment">#include &lt;string.h&gt;    </span></div><div class="line">int a[15],vis[15],ans;   </div><div class="line">void dfs(int cnt,int sum)  </div><div class="line">&#123;  </div><div class="line">    int i,j;  </div><div class="line">    <span class="keyword">if</span>(sum&gt;=ans)  </div><div class="line">		 <span class="built_in">return</span> ;  </div><div class="line">    <span class="keyword">if</span>(cnt == 9)  </div><div class="line">    &#123;  </div><div class="line">        ans = sum;  </div><div class="line">        <span class="built_in">return</span> ;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(i = 1;i&lt;10;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(!vis[i])  </div><div class="line">        &#123;  </div><div class="line">            vis[i] = 1;  </div><div class="line">            <span class="keyword">for</span>(j = i+1;j&lt;=10;j++)  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(!vis[j])  </div><div class="line">                &#123;  </div><div class="line">                    dfs(cnt+1,sum+abs(a[i]<span class="_">-a</span>[j]));  </div><div class="line">                    <span class="built_in">break</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            vis[i] = 0;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;    </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int t,i,x;  </div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;t);  </div><div class="line">    <span class="keyword">while</span>(t--)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(i = 1;i&lt;=10;i++)  </div><div class="line">        &#123;  </div><div class="line">            scanf(<span class="string">"%d"</span>,&amp;x);  </div><div class="line">            a[x] = i;              //牌面为x的牌在第i个位置  </div><div class="line">        &#125;  </div><div class="line">        memset(vis,0,sizeof(vis));  </div><div class="line">        ans = 10000000;  </div><div class="line">        dfs(0,0);  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>使用深搜算法，判断所有的情况。首先在输入数据的时候把牌面为x的数放在数组a的第i个位置，最后使用数组a的时候就是按照从1-10的顺序来显示它们所在的位置，进<br>入dfs函数中后，cnt代表的是已经完成了1-9步中的第几步操作（无论如何移动，9步操作是上限），sum用来存放移动的距离。由于是遍布了所有的情况，所以每一种<br>情况都会对应一个sum，如果下一步的sum大于等于上一步的sum（实为第一步的sum，之后逐渐变为最小的移动数值），那么结束函数回到上一步的函数的循环中。<br>如果cnt已经执行了9次，而且执行到了这步说明这一步的sum小于之前的最小移动距离ans，那么把最新的sum赋给ans后结束本次函数返回上一函数的循环中。接着第<br>2个for循环进行遍布所有的情况。vis数组是用来判断每个位置是否使用过，未使用过为0，使用过为1。第一个for循环中如果该位置未被访问过，那么该位置赋给1后<br>进入第二个for循环，从i+1开始判断，if这一位置也未访问过，那么进入dfs递归，带入的参数cnt需要+1，sum为当前的sum加上2个位置差的绝对值，以此找到最小移<br>动距离。若未满足当前情况或已经找到目前的最短距离而退出循环后，该位置需要重新赋为0（实际运算顺序为从最后开始逆向把前面的每一个位置重新赋为0，全部赋<br>为0后进行新的移动和判断）。</p>
</blockquote>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p>把牌面为x的数放在数组a的第i个位置直接简化了操作。由于数组a是按照顺序排好的，所以第二个for循环就可以直接从i+1开始判断。第二个for循环的break语句也用的<br>很好，因为在寻找最小距离的时候，1只能放在2上，2只能放在3上······以此类推。若1放在了3上，那么为了把2加进去，必须还要把1移走，必然不可能是最短距离了。<br>所以需要用break语句结束循环并把该位置的vis重新定义为0。并且第二个for循环只是找到该步的移动方向，仅此一步，下一步的移动要进行下一个dfs进行判断。第一<br>个for循环的i是小于10，而第二个的for循环的j为小于等于10。因为10张牌只需要进行9次操作，所以i的位置到9即可，j=i+1=10，即可进行最后一步移动。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深度优先搜索(DFS)与广度优先搜索(BFS)]]></title>
      <url>http://xuboming8.github.io/2016/08/30/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS-%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-BFS/</url>
      <content type="html"><![CDATA[<h1 id="DFS-depth-first-search-与BFS-breadth-first-search"><a href="#DFS-depth-first-search-与BFS-breadth-first-search" class="headerlink" title="DFS(depth first search)与BFS(breadth first search)"></a>DFS(depth first search)与BFS(breadth first search)</h1><h2 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>深度优先搜索通过栈来实现，一般用来搜索能不能到达目的地之类。深度优先搜索通过栈来实现，一般用来搜索能不能到达目的地之类。<br>面图中的数字显示了深度优先搜索顶点被访问的顺序。<br><a id="more"></a></p>
<div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147047199947.png" alt=""><br></div>

<p>它可以被形象的描述为“打破沙锅问到底”，具体一点就是访问一个顶点之后，继而访问它的下一个邻接的顶点，如此往复，直到当前顶点满足条件或者它不存在<br>邻接顶点。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>占内存少，能找到最优解（一定条件下），但能很快找到接近解（优点），可能不必遍历所有分枝（也就是速度快），一个典型应用是连连看游戏。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>深度优先搜索用栈（stack）来实现，整个过程可以想象成一个倒立的树形：<br>1、把根节点压入栈中。<br>2、每次从栈中弹出一个元素，搜索所有在它下一级的元素，把这些元素压入栈中。并把这个元素记为它下一级元素的前驱。<br>3、找到所要找的元素时结束程序。<br>4、如果遍历整个树还没有找到，结束程序。</p>
<p><strong>代码实例</strong><br><a href="http://monkeyxu.cn/2016/08/30/ACM-1008-1012/" target="_blank" rel="external">ACM-HDOJ 1010题(深搜+剪枝实现)</a></p>
<h2 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>广度优先搜索通过队列来实现，一般用来搜索最短路径。<br>下面图中的数字显示了广度优先搜索顶点被访问的顺序。</p>
<div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147047199904.png" alt=""><br></div>

<p>可以被形象的描述为“浅尝辄止”，具体一点就是每个顶点只访问它的邻接节点（如果它的邻接节点没有被访问）并且记录这个邻接节点，当访问完它的邻接节点之<br>后就结束这个顶点的访问。</p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>占内存多，能找到最优解，必须遍历所有分枝。</p>
<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>广度优先搜索使用队列（queue）来实现，整个过程也可以看做一个倒立的树形：<br>1、把根节点放到队列的末尾。<br>2、每次从队列的头部取出一个元素，查看这个元素所有的下一级元素，把它们放到队列的末尾。并把这个元素记为它下一级元素的前驱。<br>3、找到所要找的元素时结束程序。<br>4、如果遍历整个树还没有找到，结束程序。</p>
<p><strong>代码实例</strong><br><a href="http://monkeyxu.cn/2016/08/30/ACM-1023-1027-1058/" target="_blank" rel="external">ACM-HDOJ 1026题(广搜+优化队列实现)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈LIS算法(Longest Increasing Subsequence)]]></title>
      <url>http://xuboming8.github.io/2016/08/30/%E6%B5%85%E8%B0%88LIS%E7%AE%97%E6%B3%95-Longest-Increasing-Subsequence/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>LIS（Longest Increasing Subsequence）：最长上升（不下降）子序列，有两种算法复杂度为O(n*logn)和O(n^2)。这种算法只能得到最终的数据个数，但是如果<br>需要得到具体的内容就不行了。由于第一种算法使用了2个for循环，所以算法的复杂度为O(n^2),该算法比较简洁易懂，但是复杂度较高。而第二种算法使用了一个for循<br>环和二分法，算法的复杂度为O(nlogn)。此算法虽稍微复杂，但是复杂度降了下来，在需要运算时间的情况下优先选择第二种算法。</p>
<h2 id="思路以及代码详解"><a href="#思路以及代码详解" class="headerlink" title="思路以及代码详解"></a>思路以及代码详解</h2><a id="more"></a>
<p><strong>算法（nlogn）</strong></p>
<h3 id="思路（一）"><a href="#思路（一）" class="headerlink" title="思路（一）"></a>思路（一）</h3><p>假定存在一个序列d[1…9]=2 1 5 3 6 4 8 9 7，可以看出LIS长度为5。现在开始一步一步的找出来最终的结果。<br>　　定义序列B，令i=1…9来逐个考察。此外用变量len来记录现在最长算到了多少了。<br>　　首先，把d[1]放到B里，即B[1]=d[1]，就是说长度为1的LIS的最小末尾是2，这时len=1，然后把d[2]有序的放到B里，令B[1]=1（d[2]），就是说长度为1的LIS最<br>小末尾是1，d[1]=2已经没有用了，这时len=1不变。接着d[3]=5，5&gt;1，所以令B[1+1]=d[3]=5，就是说长度为2的LIS的最小末尾是5，此时的B[1…2]=1,5，len=2。<br>　　再来，d[4]=3，它正好在1和5之间，当然放在1的位置上不合适，因为1<3，因此长度为2的最小末尾应该是3，淘汰掉5，这时候b[1...2]=1,3，len=2。 　　继续d[5]="6，它在3后边，所以B[3]=4，B[1...3]=1,3,6，len=3。" 　　第6个，d[6]="4，它加在3和6之间，所以我们把6换掉，这样B[1...3]=1,3,4，len=3。" 　　第7个，d[7]="8，8">4，所以B[4]=8，B[1…4]=1,3,4,8，len=4。<br>　　第8个，d[8]=9，B[1…5]=1,3,4,8,9，len=5。<br>　　最后一个，d[9]=7，所以B[1…5]=1,3,4,7,9，len=5。<br>　　注意这里的B并不是LIS，而是对应长度的LIS的最小末尾。<br>　　总结下：若后一个数比前一个数大，那么直接此数的后面，若后一个数比前一个数小，那么覆盖掉该数。最后得到的len就是LIS长度。</3，因此长度为2的最小末尾应该是3，淘汰掉5，这时候b[1...2]=1,3，len=2。></p>
<h3 id="代码-一"><a href="#代码-一" class="headerlink" title="代码(一)"></a>代码(一)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std; </div><div class="line">int  num[100];</div><div class="line">int  ans[100]=&#123;0&#125;;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;  </div><div class="line">    int n;  </div><div class="line">    int len,low,heigh,mid;  </div><div class="line">	cin&gt;&gt;n;                //输入数组长度</div><div class="line">	<span class="keyword">for</span>(int i=0;i&lt;n;i++)	</div><div class="line">		cin&gt;&gt;num[i];       //输入数组</div><div class="line">	ans[1]=num[1];  </div><div class="line">	len=1;  </div><div class="line">	<span class="keyword">for</span>(int i=2;i&lt;=n;i++)    //使用一个<span class="keyword">for</span>循环和二分法进行计算</div><div class="line">	&#123;  </div><div class="line">		low=1;  </div><div class="line">		heigh=len;  </div><div class="line">		<span class="keyword">while</span>(low&lt;=heigh)  </div><div class="line">		&#123;  </div><div class="line">			mid=(low+heigh)/2;  </div><div class="line">			<span class="keyword">if</span>(ans[mid]&lt;num[i])  </div><div class="line">				low=mid+1;  </div><div class="line">			<span class="keyword">else</span>  </div><div class="line">				heigh=mid-1;  </div><div class="line">		&#125;  </div><div class="line">		ans[low]=num[i];  </div><div class="line">		<span class="keyword">if</span>(low&gt;len)  </div><div class="line">			len++;  </div><div class="line">	&#125;  </div><div class="line">	cout&lt;&lt;<span class="string">"LIS长度为："</span>&lt;&lt;len&lt;&lt;endl; </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>算法（n^2）</strong></p>
<h3 id="思路（二）"><a href="#思路（二）" class="headerlink" title="思路（二）"></a>思路（二）</h3><p>再以数组a[0~8]={2,1,5,3,6,4,8,9,7}为例，先定义d[0]=1来存放LIS长度，接着从数组的第二个元素开始,每次都把d[i]定义为1，接着拿该元素之前的所有元素与它比较<br>，由于1<2,所以不进行额外的运算，d[1]依然是1。接着是第三个元素5，由于2<5，所以d[2]=d[0]+1=2，接着1也小于5，所以d[2]=d[1]+1=2。下一个元素为3，由于 1和2都小于3，所以d[3]="d[0]+1=d[1]+1=2，但是5">3,所以最后的d[3]=2。接下来轮到元素6，由于之前的所有元素均小于6，所以d[4]=d[0]+1=d[1]+1=2，接着<br>d[4]=d[2]+1=d[3]+1=3，所以最后的d[4]为3。下面的元素为4，由于最多只轮到3&lt;4，所以d[5]=d[3]+1=3。接下来同理d[6]=4,d[7]=5,d[8]=4。最后寻找数组d的<br>最大值，为5，所以LIS长度为5。<br>总结：用2个for循环，第一个for循环用来依次移动需要比较的元素，第二个for循环用来把该元素与之前的所有元素进行比较，d在该位置存放的长度为之前所有元素中最后一<br>个小于该元素的d存放的长度+1（表现出来的形式为该元素只要大于前面某个元素，那么d[j]立刻变为d[i]+1），若该元素小于之前所有的元素，那么该位置存放的位置保持为<br>1。</2,所以不进行额外的运算，d[1]依然是1。接着是第三个元素5，由于2<5，所以d[2]=d[0]+1=2，接着1也小于5，所以d[2]=d[1]+1=2。下一个元素为3，由于></p>
<h3 id="代码（二）"><a href="#代码（二）" class="headerlink" title="代码（二）"></a>代码（二）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int a[9]=&#123;2,1,5,3,6,4,8,9,7&#125;;</div><div class="line">	int d[9],max=0;</div><div class="line">	d[0]=1;</div><div class="line">	<span class="keyword">for</span>(int i=1;i&lt;9;i++)</div><div class="line">	&#123;</div><div class="line">		d[i]=1;</div><div class="line">		<span class="keyword">for</span>(int j=0;j&lt;i;j++)</div><div class="line">			<span class="keyword">if</span>(a[i]&gt;a[j]&amp;&amp;d[i]+1&gt;d[j])</div><div class="line">				d[i]=d[j]+1;</div><div class="line">		max=d[i]&gt;max?d[i]:max;</div><div class="line">	&#125;</div><div class="line">	cout&lt;&lt;<span class="string">"LIS长度："</span>&lt;&lt;max&lt;&lt;endl;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>链接：<a href="http://monkeyxu.cn/2016/08/30/ACM-1023-1027-1058/" target="_blank" rel="external">ACM-HDOJ 1025题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Talking with Catalan]]></title>
      <url>http://xuboming8.github.io/2016/08/30/Talking-with-Catalan/</url>
      <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>由于卡特兰数在很多公司的面试题中频繁出现，在竞赛中更是多次考察，所以特地总结下卡特兰数的应用。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>卡特兰数又称卡塔兰数，是组合数学中一个常出现在各种计数问题中的数列。以比利时的数学家欧仁·查理·卡塔兰 (1814–1894)的名字来命名。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><a id="more"></a>
<p>令h(0)=1,h(1)=1，catalan数满足递推式：h(n)= h(0)h(n-1)+h(1)h(n-2) + … + h(n-1)h(0) (n&gt;=2)<br>另类递推式：<br>h(n)=h(n-1)(4n-2)/(n+1);<br>递推关系的解为：<br>h(n)=C(2n,n)/(n+1)=(2n)!/(n+1)!n! (n=0,1,2,…)　　　　　<strong>C(2n，n)代表从2n个数中取得n个数的组合数</strong><br>递推关系的另类解为：<br>h(n)=C(2n,n)-C(2n,n-1)(n=0,1,2,…)</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="求卡特兰数"><a href="#求卡特兰数" class="headerlink" title="求卡特兰数"></a>求卡特兰数</h3><p><strong>题目要求</strong><br>根据递推式或递归关系求解</p>
<p><strong>解法</strong><br>任何有关catalan数的题目最后都是要进行求h(n)的运算，大多用h(n)=h(n-1)(4n-2)/(n+1)进行推导。牵涉到大数的乘除。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//数组a存放大数，b为进行乘除的数字。</div><div class="line">void multiply(int a[],int len,int b)</div><div class="line">&#123;  </div><div class="line">    <span class="keyword">for</span>(int i=len-1,carry=0;i&gt;=0;--i)</div><div class="line">    &#123;</div><div class="line">        carry+=b*a[i];  </div><div class="line">        a[i]=carry%BASE;  </div><div class="line">        carry/=BASE;  </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line">void divide(int a[],int len,int b) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(int i=0,div=0;i&lt;len;++i)</div><div class="line">    &#123;  </div><div class="line">        div=div*BASE+a[i];  </div><div class="line">        a[i]=div/b;</div><div class="line">        div%=b;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line">//具体运算在ACM-HDOJ 1023题已给出</div></pre></td></tr></table></figure></p>
<h3 id="出栈问题"><a href="#出栈问题" class="headerlink" title="出栈问题"></a>出栈问题</h3><p><strong>题目要求</strong><br>一个栈(无穷大)的进栈序列为1、2、3、…、n，有多少个不同的出栈序列?</p>
<p><strong>解法</strong><br>此方法在ACM-HDOJ 1023题思路中已给出证明。<a href="http://monkeyxu.cn/2016/08/30/ACM-1023-1027-1058/" target="_blank" rel="external">1023链接</a></p>
<h3 id="由高到矮排队问题"><a href="#由高到矮排队问题" class="headerlink" title="由高到矮排队问题"></a>由高到矮排队问题</h3><p><strong>题目要求</strong><br>12个高矮不同的人，排成两排，每排必须是从矮到高排列，而且第二排比对应的第一排的人高，问排列方式有多少种？</p>
<p><strong>解法</strong><br>我们先把这12个人从低到高排列,然后,选择6个人排在第一排,那么剩下的6个肯定是在第二排.<br>用0表示对应的人在第一排,用1表示对应的人在第二排,那么含有6个0,6个1的序列,就对应一种方案.<br>比如000000111111就对应着<br>第一排：0 1 2 3 4 5<br>第二排：6 7 8 9 10 11<br>010101010101就对应着<br>第一排：0 2 4 6 8 10<br>第二排：1 3 5 7 9 11<br>问题转换为，这样的满足条件的01序列有多少个。<br>观察规律我们发现1的出现前边必须有一个相应的0对应，所以从左到右的所有序列中0的个数要一直大于1的个数。那么我们从左往右扫描，第一次出现1的个数<br>等于0的个数是第k位，那么在此之前，0的个数是大于1的个数的。在此之后，0的个数也是大于1的个数的。所以第k位0和1的个数第一次相等的排列有他们这两<br>部分的个数相乘的结果。那么所有的k有多少种，则把它们相加起来，就是最后的排列数。每一项的种类是f（k-1）*f（n-k），求和后便是卡特兰数。<br>如果把0看成入栈操作，1看成出栈操作，等价于给定6个元素，合法的入栈出栈序列有多少个。依旧转换成求卡特兰数的问题。<br>需要注意此题中n个人，那么带入通项的数字应为n/2。</p>
<h3 id="括号化问题"><a href="#括号化问题" class="headerlink" title="括号化问题"></a>括号化问题</h3><p><strong>题目要求</strong><br>矩阵链乘： P=A1×A2×A3×……×An，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？</p>
<p><strong>解法</strong><br>n个矩阵需要连乘(n-1)次，因此需要(n-1)对括号。且这里的括号只是为了使矩阵两两结合，而不是单纯为加括号而加括号，像( (a1) (a2))，这里将两个矩<br>阵分别括起来是不符合要求的。因此这里如果确定了括号的顺序，那么矩阵的结合顺序也会确定，如(()())对应了(( a1 a2) (a3 a4))。注意到是(n-1)<br>对括号，即(n-1)个左括号和(n-1)个右括号，那么应该使用h[n-1]来计算。</p>
<h2 id="买票找零问题"><a href="#买票找零问题" class="headerlink" title="买票找零问题"></a>买票找零问题</h2><p><strong>题目要求</strong><br>2n个人排队买票，其中n个人持50元，n个人持100元。每张票50元，且一人只买一张票。初始时售票处没有零钱找零。请问这2n个人一共有多少种排队顺序，不至<br>于使售票处找不开钱？</p>
<p><strong>解法</strong><br>队伍的序号标为0,1,…,2n-1,并把50元看作左括号，100元看作右括号，合法序列即括号能完成配对的序列。对于一个合法的序列，第0个一定是左括号，它必然与<br>某个右括号配对，记其位置为k。那么从1到k-1、k+1到2n-1也分别是两个合法序列。每一项的种类是f（k-1）*f（n-k），求和后便是卡特兰数。也需注意此题中n<br>个人，带入通项的数字应为n/2。</p>
<h3 id="凸多边形三角划分"><a href="#凸多边形三角划分" class="headerlink" title="凸多边形三角划分"></a>凸多边形三角划分</h3><p><strong>题目要求</strong></p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147005039992.png" alt=""><br></div><br>将一个凸多边形区域分成三角形区域(划分线不交叉)的方法数?</p>
<p><strong>解法</strong><br>使用卡特兰数通项进行计算。</p>
<h3 id="圆上点对互连问题"><a href="#圆上点对互连问题" class="headerlink" title="圆上点对互连问题"></a>圆上点对互连问题</h3><p><strong>题目要求</strong></p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147006099407.png" alt=""><br></div><br>在圆上选择2n个点，将这些点成对连接起来，且所得n条线段不相交，求可行的方法数。</p>
<p><strong>解法</strong><br>将圆上的点依次标为P0,P1,…P2n-1。为了避免混淆，使用F(2n)表示2n个点可连成的线段数，选择Pk与P0相连(0&lt;k&lt;n)，同样地可以看出，k必为奇数，否则1至k-1<br>之间有奇数个点，不可能成对连成直线。同样地把k设为2i+1，那么线段P0Pk把剩余的点分为了1…2i和2i+2…2n-1，且新的连线不能与0k相交，它们只能属于0k<br>把园划分出的这两个区域之一。即F(2n) = ∑F(2i)F(2n-1-(2i+2)+1) = ∑F(2i)F(2n-2i-2)，其中i = 0 … n-1。这时，又转化成熟悉的形式了。</p>
<h3 id="给定节点组成二叉搜索树"><a href="#给定节点组成二叉搜索树" class="headerlink" title="给定节点组成二叉搜索树"></a>给定节点组成二叉搜索树</h3><p><strong>题目要求</strong></p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147006227873.png" alt=""><br></div><br>给定N个节点，能构成多少种形状不同的二叉树？</p>
<p><strong>解法</strong><br>从递推公式出发，记为F3(n)，选出一点为根，k个点作为左子树，n-k-1个点作为右子树。那么F3(n) = ∑F3(k)F3(n-k-1)，k=0,…,n-1。该公式是以F3（0）=1开始的。<br>满足卡特兰数的形式。</p>
<h3 id="街区对角线问题"><a href="#街区对角线问题" class="headerlink" title="街区对角线问题"></a>街区对角线问题</h3><p><strong>题目要求</strong></p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147006242846.png" alt=""><br></div><br>某个城市的某个居民，每天他须要走过2n个街区去上班（他在其住所以北n个街区和以东n个街区处工作）。如果他不跨越（但可以碰到）从家到办公室的对角线，那么有多少<br>条可能的道路？</p>
<p><strong>解法</strong><br>为了不跨越对角线，向东走的步数时刻要大于等于向北走的步数。可以看出路线序列由n次向东和n次向北组成，且从第一个元素开始的任意子序列中向东次数不少于向北次数此<br>时可以等效为按高矮排队问题。用卡特兰数递推式求解。注意为h(n)。</p>
<h3 id="n层阶梯切割问题"><a href="#n层阶梯切割问题" class="headerlink" title="n层阶梯切割问题"></a>n层阶梯切割问题</h3><p><strong>题目要求</strong></p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147006275273.png" alt=""><br></div><br>用n个长方形填充一个高度为n的阶梯状图形的方法个数？</p>
<p><strong>解法</strong><br>使用卡特兰数通项进行计算。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM 1023-1027 1058]]></title>
      <url>http://xuboming8.github.io/2016/08/30/ACM-1023-1027-1058/</url>
      <content type="html"><![CDATA[<h1 id="HDOJ-ACM-1023-1027-1058解答及思路"><a href="#HDOJ-ACM-1023-1027-1058解答及思路" class="headerlink" title="HDOJ-ACM 1023-1027 1058解答及思路"></a>HDOJ-ACM 1023-1027 1058解答及思路</h1><h2 id="1023"><a href="#1023" class="headerlink" title="1023"></a>1023</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146997325701.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146997325741.png" alt=""><br><a id="more"></a></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146997325827.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146997325864.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146997325902.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>基于1022题，在它的基础上要求输出小于100辆火车进站后的出站顺序。</p>
<h3 id="参考AC代码-一"><a href="#参考AC代码-一" class="headerlink" title="参考AC代码(一)"></a>参考AC代码(一)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;memory.h&gt;  </span></div><div class="line">using namespace std;  </div><div class="line"><span class="comment">#define MAX 101  </span></div><div class="line"><span class="comment">#define BASE 10</span></div><div class="line">void multiply(int a[],int len,int b)</div><div class="line">&#123;  </div><div class="line">    <span class="keyword">for</span>(int i=len-1,carry=0;i&gt;=0;--i)</div><div class="line">    &#123;</div><div class="line">        carry+=b*a[i];  </div><div class="line">        a[i]=carry%BASE;  </div><div class="line">        carry/=BASE;  </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line">void divide(int a[],int len,int b) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(int i=0,div=0;i&lt;len;++i)</div><div class="line">    &#123;  </div><div class="line">        div=div*BASE+a[i];  </div><div class="line">        a[i]=div/b;</div><div class="line">        div%=b;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int i,j,h[101][MAX];  </div><div class="line">    memset(h[1],0,MAX*sizeof(int));</div><div class="line">    <span class="keyword">for</span>(i=2,h[1][MAX-1]=1;i&lt;=100;++i)</div><div class="line">    &#123;  </div><div class="line">        memcpy(h[i],h[i-1],MAX*sizeof(int));</div><div class="line">        multiply(h[i],MAX,4*i-2);</div><div class="line">        divide(h[i],MAX,i+1);    </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(cin&gt;&gt;i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(j=0;j&lt;MAX &amp;&amp; h[i][j]==0;++j);</div><div class="line">        <span class="keyword">for</span>(;j&lt;MAX;++j) </div><div class="line">			cout&lt;&lt;h[i][j];  </div><div class="line">       cout&lt;&lt;endl;</div><div class="line">    &#125;      </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考AC代码-二"><a href="#参考AC代码-二" class="headerlink" title="参考AC代码(二)"></a>参考AC代码(二)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;memory.h&gt;  </span></div><div class="line">using namespace std;  </div><div class="line"><span class="comment">#define MAX 101  </span></div><div class="line"><span class="comment">#define BASE 10000</span></div><div class="line"> //base只是一个基度，对最终取值并没有影响，相反，base取值愈大，计算量愈小。base发生改变的时候，下面的输出也要相应地做出调整</div><div class="line">void multiply(int a[],int len,int b)          //乘法   </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">for</span>(int i=len-1,carry=0;i&gt;=0;--i)          //从最后一位开始相乘,依次向前与每一位相乘   </div><div class="line">    &#123;</div><div class="line">        carry+=b*a[i];  </div><div class="line">        a[i]=carry%BASE;  </div><div class="line">        carry/=BASE;  </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line">void divide(int a[],int len,int b)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(int i=0,div=0;i&lt;len;++i)               //从高位除起  </div><div class="line">    &#123;  </div><div class="line">        div=div*BASE+a[i];  </div><div class="line">        a[i]=div/b;                //b为除数  </div><div class="line">        div%=b;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int i,j,h[101][MAX];  </div><div class="line">    memset(h[1],0,MAX*sizeof(int));                //赋值，每一个都置为0   </div><div class="line">    <span class="keyword">for</span>(i=2,h[1][MAX-1]=1;i&lt;=100;++i)           //运用递归，并且h[1]=1;   </div><div class="line">    &#123;  </div><div class="line">        memcpy(h[i],h[i-1],MAX*sizeof(int));        //h[i]=h[i-1];按字节拷贝，保证了h[i]和h[i-1]指向数组的一致性   </div><div class="line">        multiply(h[i],MAX,4*i-2);//h[i]*=(4*i-2);  </div><div class="line">        divide(h[i],MAX,i+1);//h[i]/=(i+1);          </div><div class="line">    &#125;                                             //递归得到前100项的卡特兰数！  </div><div class="line">    <span class="keyword">while</span>(cin&gt;&gt;i) </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(j=0;j&lt;MAX &amp;&amp; h[i][j]==0;++j);        //从0位开始搜索，找到不为0的第一个数</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,h[i][j++]);            //第一位可能不足四位，就地输出</div><div class="line">        <span class="keyword">for</span>(;j&lt;MAX;++j)  </div><div class="line">        &#123;  </div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%04d"</span>,h[i][j]);         //处在中间的值也可能没有四位，这时候要注意了，往左边加0，凑足4位，不然答案会出错</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>　　首先，我们假设f（n）是序列个数为n的出栈序列种数。（我们假定，最后出栈的元素为k，k取不同值时的情况是相互独立的，也就是求出每种k最后出栈的情况数后可<br>用加法原则，由于k最后出栈，因此，在k入栈之前，比k小的值均出栈，此处情况有f(k-1)种，而之后比k大的值入栈，且都在k之前出栈，因此有f(n-k)种方式，由于比k<br>小和比k大的值入栈出栈情况是相互独立的，此处可用乘法原则，f(n-k)f(k-1)种，求和便是Catalan递归式。而该题要用到Catalan的递归式：h(n)=h(n-1)(4*n-2)/(n+1);<br>而该题最大求到了h（100），已经超过了50位且接近60位数，所以long long型也无法使用，要使用大数的乘法和除法。代码一是以10为基准教容易理解。而代码二是以<br>10000为基准，即数组的一个位置可存放四位数，把四位数作为一个整体进行计算。此题的乘除法也设计的极为巧妙，大大减少了运算复杂度。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>　　开始需要把h[1]的那一行全部初始化为0，再用memset时确保每一行没有用到的位置全部置为0。在使用10000为基准的时候要注意一次性输出4位数，若不满4位数则要<br>向左用0补齐。在使用除法运算的时候，若有一位没有除尽，则要把余数*基数加上后一位的数字，继续进行除法运算。若基数取的是10，则进行的是我们熟悉的运算，容易<br>理解。但相应的也会增加程序的运行时间。</p>
<h3 id="转跳-Catalan-number"><a href="#转跳-Catalan-number" class="headerlink" title="转跳 Catalan number"></a><a href="http://monkeyxu.cn/2016/08/30/Talking-with-Catalan/" target="_blank" rel="external">转跳 Catalan number</a></h3><h2 id="1024"><a href="#1024" class="headerlink" title="1024"></a>1024</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147018886492.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147018886537.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147018886576.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14701888661.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147018886645.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>给定n个数，和m个段。求在这n个数中求出m个子段，使得这些子段的和最大.</p>
<h3 id="参考AC代码-一-1"><a href="#参考AC代码-一-1" class="headerlink" title="参考AC代码(一)"></a>参考AC代码(一)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;  </span></div><div class="line">using namespace std;  </div><div class="line">const int MAX=1000001;  </div><div class="line">int dp[2][MAX];  </div><div class="line">int w[MAX];  </div><div class="line">int sum[MAX];//在主函数里开个sum[MAX]，是不行的，因为MAX是在太大！  </div><div class="line">int cmax(int a,int b)//求最大值  </div><div class="line">&#123;  </div><div class="line">    <span class="built_in">return</span> a&gt;b?a:b;  </div><div class="line">&#125;   </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int i,k;  </div><div class="line">    int m,n;  </div><div class="line">      </div><div class="line">    <span class="keyword">while</span>(scanf(<span class="string">"%d%d"</span>,&amp;m,&amp;n)&gt;0)  </div><div class="line">    &#123;  </div><div class="line">        sum[0]=0;  </div><div class="line">        <span class="keyword">for</span>(i=1;i&lt;=n;i++)  </div><div class="line">        &#123;  </div><div class="line">            cin&gt;&gt;k;  </div><div class="line">            sum[i]=sum[i-1]+k;//sum[i]里存的是前i个元素的和  </div><div class="line">            dp[0][i]=0;//从前i个元素中取0段，最大值为0  </div><div class="line">        &#125;  </div><div class="line">//我们假设a[i]中存放该序列第i个值，w[i][k]表示前k个数分为i段，第k个数必须选这种情况下取得的最大值  </div><div class="line">//b[i][k]表示在前k个数中取i段这种情况下取得的最大值  </div><div class="line">  </div><div class="line">//w[i][k]：前k个数分为i段，第k个数必须选；1：第k个数单独为1段；2：第k个数与前面的数连一块。w[i][k]=max(b[i-1][k-1],w[i][k-1])+a[k];  </div><div class="line">//b[i][k]：前k个数分为i段，第k个数可选可不选；1：选第k个数，2：不选第k个数。b[i][k]=max(b[i][k-1],w[i][k])  </div><div class="line">//w[i][k]=max(b[i-1][k-1],w[i][k-1])+a[k];  </div><div class="line">//b[i][k]=max(b[i][k-1],w[i][k])；  </div><div class="line">//w[i][k],b[i][i]容易求得，所以由b[i-1][k-1]-&gt;w[i][k]-&gt;b[i][k],只要知道b[0][k]，全部都能成功运行！  </div><div class="line">  </div><div class="line">//当从k个元素中取j段，可以分为两种情况，即第k个元素可以取，也可以不取，取，那么a[k]要么是单独为一段b[i-1][k-1]+a[k];  </div><div class="line">//要么是第k个数与前面的数连一块，即w[i][k-1]+a[k]，故w[i][k]=max(b[i-1][k-1],w[i][k-1])+a[k];  </div><div class="line">  </div><div class="line">//要么不取 即b[i][k]=b[i][k-1];  </div><div class="line">//综合起来，b[i][k]=max(b[i][k-1],w[i][k])；  </div><div class="line">       int t=1;  </div><div class="line">       <span class="keyword">for</span>(i=1;i&lt;=m;i++)//i表示在取i段,自然i&lt;=m;  </div><div class="line">       &#123;  </div><div class="line">             </div><div class="line">           <span class="keyword">for</span>(k=i;k&lt;=n;k++)//为什么k从i开始？dp[i][k](k&lt;i)是没有意义的！  </div><div class="line">           &#123;  </div><div class="line">               <span class="keyword">if</span>(i==k)  </div><div class="line">               dp[t][k]=w[k]=sum[k];//从k个数中取k段的最大值是前k个数的和  </div><div class="line">               <span class="keyword">else</span>  </div><div class="line">               &#123;  </div><div class="line">                   w[k]=cmax(dp[1-t][k-1],w[k-1])+sum[k]-sum[k-1];//w[k]表示k个元素取i段，a[k]必须取时的最大值  </div><div class="line">        //w[i][k]=max(b[i-1][k-1],w[i][k-1])+a[k];  </div><div class="line">                   dp[t][k]=cmax(dp[t][k-1],w[k]);//dp[t][k]表示在a[k]可取可不取这两种情况下取得的最大值  </div><div class="line">                   //自然，dp[t][k]记录的就是在前k个元素中取i段时取得的最大值！  </div><div class="line">               &#125;  </div><div class="line">           &#125;  </div><div class="line">           t=1-t;//t在1,0之间交替变换  </div><div class="line">  //为什么要交替呢？这是为了节省空间  </div><div class="line">  //仔细观察递归式  </div><div class="line">  //w[i][k]=max(b[i-1][k-1],w[i][k-1])+a[k];  </div><div class="line">  //b[i][k]=max(b[i][k-1],w[i][k])；  </div><div class="line">  //我们发现，对于取i段，w[i][j]只与b[i-1][k-1]和w[i][k-1]有关，与之前的那一些项没有关系  </div><div class="line">  //因此我们数组可以开小一点，用更新来覆盖掉前面的值！  </div><div class="line">       &#125;  </div><div class="line">       cout&lt;&lt;dp[m%2][n]&lt;&lt;endl;//奇次轮还是偶次轮  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考AC代码-二-1"><a href="#参考AC代码-二-1" class="headerlink" title="参考AC代码(二)"></a>参考AC代码(二)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;cstring&gt;  </span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;   </span></div><div class="line">using namespace std;</div><div class="line">int curr_best[1000010];//保存当前状态  </div><div class="line">int prev_best[1000010];  </div><div class="line">int max_sum,i,j;  </div><div class="line">int n,m;  </div><div class="line">int data[1000010];  </div><div class="line"><span class="comment">#define MIN_SUM 0x80000000  //在4字节中转换成10进制是-2147483648，最小的二进制数</span></div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">while</span>(scanf(<span class="string">"%d %d"</span>,&amp;m,&amp;n)!=EOF)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(int i=1;i&lt;=n;i++)  </div><div class="line">            scanf(<span class="string">"%d"</span>,&amp;data[i]);  </div><div class="line">        memset(curr_best,0,sizeof(curr_best));  </div><div class="line">        memset(prev_best,0,sizeof(prev_best));  </div><div class="line">        int j=0;  </div><div class="line">        <span class="keyword">for</span>(int i=1;i&lt;=m;++i)  </div><div class="line">        &#123;  </div><div class="line">            max_sum=MIN_SUM;  </div><div class="line">            <span class="keyword">for</span>(j=i;j&lt;=n;++j)  </div><div class="line">            &#123;  </div><div class="line">                //curr  b(i,*);  </div><div class="line">                //prev b(i-1,*);  </div><div class="line">				curr_best[j]=max(curr_best[j-1],prev_best[j-1])+data[j];  </div><div class="line">                prev_best[j-1]=max_sum;//这两条语句不能写反了，这块我纠结了好久，解释一下，prev_best[j-1]表示的是上一个状态中i...j-1的最大值，max_sum更新之后表示的i...j的最大值，所以不能写反了  </div><div class="line">				max_sum=max(max_sum,curr_best[j]);  </div><div class="line">            &#125;  </div><div class="line">            prev_best[j-1]=max_sum;//prev_best[j-1]中始终保持着前一个状态的最大值，这个很重要  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max_sum);  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>见代码注释<br>代码（二）思路与（一）相同，只是处理的方法略有不同。</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于这题给的n很大，需要用dp来解。而且需要优化操作。</p>
<h2 id="1025"><a href="#1025" class="headerlink" title="1025"></a>1025</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147027890258.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147027890309.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147027890345.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147027890385.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147027890427.png" alt=""></p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>两条线，每条线上各有n个点，表示n个城市，第一条表示rich 城市，第二天表示poor 城市，从第一条线连接到第二条线上，问最多能连多少条不相交的路线。</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;string&gt;</span></div><div class="line">using namespace std;</div><div class="line">int num[50001],ans[50001];</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n,temp1,temp2,k=1,height,low,mid,len;</div><div class="line">	<span class="keyword">while</span>(scanf(<span class="string">"%d"</span>,&amp;n)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			scanf(<span class="string">"%d %d"</span>,&amp;temp1,&amp;temp2);</div><div class="line">			num[temp1]=temp2;</div><div class="line">		&#125;</div><div class="line">		memset(ans,0,sizeof(ans));</div><div class="line">		ans[1]=num[1],len=1;</div><div class="line">		<span class="keyword">for</span>(int i=2;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			low=1;</div><div class="line">			height=len;</div><div class="line">			<span class="keyword">while</span>(height&gt;=low)</div><div class="line">			&#123;</div><div class="line">				mid=(height+low)/2;</div><div class="line">				<span class="keyword">if</span>(num[i]&gt;ans[mid])</div><div class="line">					low=mid+1;</div><div class="line">				<span class="keyword">else</span></div><div class="line">					height=mid-1;</div><div class="line">			&#125;</div><div class="line">			ans[low]=num[i];</div><div class="line">			<span class="keyword">if</span>(low&gt;len)</div><div class="line">				len++;</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;k&lt;&lt;<span class="string">":"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">if</span>(len==1)</div><div class="line">			cout&lt;&lt;<span class="string">"My king, at most 1 road can be built."</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"My king, at most "</span>&lt;&lt;len&lt;&lt;<span class="string">" road can be built."</span>&lt;&lt;endl;</div><div class="line">		cout&lt;&lt;endl;</div><div class="line">		k++;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>LIS算法：可以按照富有（贫穷）的排序，然后找贫穷（富有）的村子序列的最长上升子序列就可以了，这样就能保证不相交，而且就是最优解。</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>因为数据大，n^2的算法是不可以的，需要使用n×logn的算法形式。需要注意road有单复数形式。可以发现B插入数据是有序的，而且进行替换而不需要移动，<br>也就是说可以使用二分查找，时间复杂度就降下来了。这种算法只能得到最终的数据个数，但是如果需要得到具体的内容就不行了。看网上说首先要排序，<br>其实仔细看看题目的说明，它的边的输入是有序的，所以根本不需要进行排序。</p>
<h2 id="1026"><a href="#1026" class="headerlink" title="1026"></a>1026</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147045196101.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147045196151.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14704519619.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147045196228.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147045196275.png" alt=""></p>
<h3 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h3><p>迷宫问题。要求从左上走到右下并记录下实时的数据。</p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;  </span></div><div class="line"><span class="comment">#include&lt;queue&gt;  </span></div><div class="line"><span class="comment">#include&lt;stack&gt;  </span></div><div class="line">using namespace std;  </div><div class="line">const int SIZE=120;   </div><div class="line">struct Record   </div><div class="line">&#123;  </div><div class="line">    int i;  </div><div class="line">    int j;  </div><div class="line">    int cost;             //总耗时   </div><div class="line">    bool operator&lt;(const Record &amp;a) const  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">return</span> cost&gt;a.cost;  </div><div class="line">    &#125;  </div><div class="line">&#125;temp,temp1;   </div><div class="line">struct node  </div><div class="line">&#123;  </div><div class="line">    int i;</div><div class="line">    int j;  </div><div class="line">    int num;  </div><div class="line">&#125;pre[120][120];          //前驱结点      </div><div class="line">int mg[SIZE][SIZE];      //定义一个迷宫数组    </div><div class="line">int b[4][2]=&#123;&#123;0,1&#125;,&#123;0,-1&#125;,&#123;1,0&#125;,&#123;-1,0&#125;&#125;;   </div><div class="line">int m,n;                 //迷宫大小，行列值   </div><div class="line">int mins;   </div><div class="line">bool bfs(int x1,int y1,int x2,int y2)</div><div class="line">&#123;  </div><div class="line">      priority_queue&lt;Record&gt; q;  </div><div class="line">      int bx,by;  </div><div class="line">      int flag[SIZE][SIZE];           //标志数组最好放进来，这样每次调用函数时重新建立，会将里面的数据清0;  </div><div class="line">      memset(flag,0,sizeof(flag));           //在使用flag数组的时候，先清一下0，不然会WA</div><div class="line">      flag[x1][y1]=1;              //走过得路径标记为1，表示不能再走   </div><div class="line">      temp1.i=x1;  </div><div class="line">      temp1.j=y1;  </div><div class="line">      temp1.cost=0;             //起点的耗时为0   </div><div class="line">      q.push(temp1);               //入队列   </div><div class="line">      <span class="keyword">while</span>(!q.empty())</div><div class="line">      &#123;  </div><div class="line">             temp=q.top();              //取队顶元素  </div><div class="line">             q.pop();                   //出队列  </div><div class="line">             <span class="keyword">if</span>(temp.i==x2 &amp;&amp; temp.j==y2)   </div><div class="line">             &#123;   </div><div class="line">                mins=temp.cost;            //直到终点的花费就是最少花费   </div><div class="line">                <span class="built_in">return</span> <span class="literal">true</span>;  </div><div class="line">             &#125;   </div><div class="line">             <span class="keyword">for</span>(int i=0;i&lt;4;i++)  </div><div class="line">             &#123;  </div><div class="line">                bx=temp.i+b[i][0];  </div><div class="line">                by=temp.j+b[i][1];  </div><div class="line">                <span class="keyword">if</span>(bx&gt;=0 &amp;&amp; bx&lt;m &amp;&amp; by&gt;=0 &amp;&amp; by&lt;n &amp;&amp; !flag[bx][by] &amp;&amp; mg[bx][by]!=-1)  </div><div class="line">                &#123;  </div><div class="line">                    temp1.i=bx;  </div><div class="line">                    temp1.j=by;  </div><div class="line">                    temp1.cost=temp.cost+mg[bx][by];  </div><div class="line">                    pre[bx][by].i=temp.i;      //bx,by是现在结点的下标值  </div><div class="line">                    pre[bx][by].j=temp.j;      //用来记录前驱结点的下标值  </div><div class="line">                    pre[bx][by].num=mg[temp.i][temp.j]; </div><div class="line">                    q.push(temp1);            //入队列！  </div><div class="line">                    flag[bx][by]=1;           //标记为1;走过了之后就不能再走了！  </div><div class="line">                 &#125;          </div><div class="line">            &#125;    </div><div class="line">         &#125;</div><div class="line">     <span class="built_in">return</span> <span class="literal">false</span>;           </div><div class="line"> &#125;     </div><div class="line">void <span class="function"><span class="title">print</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int k=1,i;  </div><div class="line">    int x1,y1;  </div><div class="line">    int x2,y2;  </div><div class="line">    stack&lt;node&gt; s;  </div><div class="line">    node temp,temp1;  </div><div class="line">    temp1.i=m-1; temp1.j=n-1; temp1.num=mg[m-1][n-1];  </div><div class="line">    s.push(temp1);  </div><div class="line">    <span class="keyword">for</span>(x1=m-1,y1=n-1;;)               //从终点开始，一级级地向前压栈  </div><div class="line">    &#123;  </div><div class="line">        x2=x1;  </div><div class="line">        y2=y1;  </div><div class="line">        s.push(pre[x2][y2]);           //不断的压栈  </div><div class="line">        x1=pre[x2][y2].i;              //不断地向前搜寻前结点  </div><div class="line">        y1=pre[x2][y2].j;              //一直压到了x1=0,y1=0;  </div><div class="line">        <span class="keyword">if</span>(x1==0 &amp;&amp; y1==0) <span class="built_in">break</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">while</span>(!s.empty())  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(s.size()-1==0 &amp;&amp; s.top().num==1) <span class="built_in">break</span>;    </div><div class="line">        temp=s.top();  </div><div class="line">        s.pop();  </div><div class="line">        <span class="keyword">if</span>(s.size()&gt;0)  </div><div class="line">        temp1=s.top();  </div><div class="line">        <span class="keyword">if</span>(temp.num==1)  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%ds:(%d,%d)-&gt;(%d,%d)\n"</span>,k++,temp.i,temp.j,temp1.i,temp1.j);  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">for</span>(i=1;i&lt;temp.num;i++)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%ds:FIGHT AT (%d,%d)\n"</span>,k++,temp.i,temp.j);  </div><div class="line">            <span class="keyword">if</span>(s.size()&gt;0)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%ds:(%d,%d)-&gt;(%d,%d)\n"</span>,k++,temp.i,temp.j,temp1.i,temp1.j);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int i,k,x1,y1;  </div><div class="line">    char str[SIZE];              //字符串数组  </div><div class="line">    <span class="keyword">while</span>(scanf(<span class="string">"%d %d"</span>,&amp;m,&amp;n)&gt;0)  </div><div class="line">    &#123;  </div><div class="line">         <span class="keyword">for</span>(i=0;i&lt;m;i++)//m行  </div><div class="line">         &#123;  </div><div class="line">            cin&gt;&gt;str;            //输入字符串  </div><div class="line">            <span class="keyword">for</span>(k=0;k&lt;n;k++)//n列  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(str[k]==<span class="string">'.'</span>) mg[i][k]=1;  </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(str[k]==<span class="string">'X'</span>) mg[i][k]=-1;  </div><div class="line">                <span class="keyword">else</span> mg[i][k]=str[k]-<span class="string">'0'</span>+1;           </div><div class="line">            &#125;  </div><div class="line">         &#125;  </div><div class="line">         <span class="keyword">if</span>(bfs(0,0,m-1,n-1))  </div><div class="line">         &#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"It takes %d seconds to reach the target position, let me show you the way.\n"</span>,mins);  </div><div class="line">            <span class="built_in">print</span>();  </div><div class="line">         &#125;  </div><div class="line">         <span class="keyword">else</span>  </div><div class="line">         <span class="built_in">printf</span>(<span class="string">"God please help our poor hero.\n"</span>);  </div><div class="line">         <span class="built_in">printf</span>(<span class="string">"FINISH\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">  <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>使用广搜+优化队列可以使得到的第一个路线就是最优化路线。mg数组中.存放的为1，X存放的为-1，怪物需要消耗几秒就存储几秒。flag数组用来存放走过的位置，<br>若走过的话存储为1，不能再走。使用优化队列，每次进行判断的都是队首的元素，如果满足继续放入队首，继续对改元素进行下一步判断。若不满足则退出队列，<br>第二个元素再进行判断，依次重复最后得到最优解。再使用栈进行输出。从末尾开始反向把元素一一压入栈中，再利用栈的特点从正向开始输出。pre数组存储的是<br>每个满足题意的坐标用于输出。</p>
<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>flag数组需要初始化为0，输出的时候遇到怪物的情况需要额外讨论。本题若使用深搜会超时，需要使用广搜+优化队列求解。把自己定义的结构体变量放到自己建立的<br>队列或者栈中时需要重载小于号。<br>本题使用了queue和stack的头文件：<br>(1)queue:若定义队列queue q，q.empty()判断是否为空队列，q.push(1)表示元素1进队列，q.pop()表示出队列，q.front()表示得到队首的值，q.size()表示得<br>到队列里元素个数。<br>(2)stack:若定义栈stackq，q.empty()判断是否为栈空，q.push(1)表示元素1进栈，q.pop()表示弹出栈中元素，q.top()表示取出栈顶元素，q.size()表示得到栈<br>中的元素个数。</p>
<h2 id="1027"><a href="#1027" class="headerlink" title="1027"></a>1027</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147057709869.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147057709918.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147057709955.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14705770999.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147057710023.png" alt=""></p>
<h3 id="题目要求-4"><a href="#题目要求-4" class="headerlink" title="题目要求"></a>题目要求</h3><p>按照字典顺序输出从1-n n个自然数的组合数。</p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;   </span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;  </span></div><div class="line">using namespace std;  </div><div class="line">const int SIZE=1002;  </div><div class="line">  </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int n,m;  </div><div class="line">    int i,count;  </div><div class="line">    int seq[SIZE];  </div><div class="line">    <span class="keyword">while</span>(scanf(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(i=0;i&lt;SIZE;i++)  </div><div class="line">        seq[i]=i+1;  </div><div class="line">         count=0;  </div><div class="line">        <span class="keyword">do</span>  </div><div class="line">        &#123;  </div><div class="line">            count++;  </div><div class="line">            <span class="keyword">if</span>(count==m)  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">for</span>(i=0;i&lt;n;i++)  </div><div class="line">                <span class="keyword">if</span>(i==n-1)  </div><div class="line">                cout&lt;&lt;seq[i];  </div><div class="line">                <span class="keyword">else</span>  </div><div class="line">                cout&lt;&lt;seq[i]&lt;&lt;<span class="string">" "</span>;  </div><div class="line">                cout&lt;&lt;endl;  </div><div class="line">                <span class="built_in">break</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">while</span> (next_permutation(seq,seq+n));  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>本题若使用如上代码的STL全排列函数，则可以快速求解，它的作用就是求出下一个字典序的组合数。与之对应的有prev_permutation，作用是求出上一个字典序<br>的组合数。但是它并没有真正带给我们实质的知识点，所以下面给出不使用STL的求解方法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdipo.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;  </span></div><div class="line">using namespace std;  </div><div class="line"><span class="comment">#define MAX 50</span></div><div class="line">int a[MAX];    </div><div class="line">int permutation(int n)               //排列函数  </div><div class="line">&#123;  </div><div class="line">    int i,j,tmp,flag=1;  </div><div class="line">    <span class="keyword">for</span>(i=n;i&gt;=2 &amp;&amp; flag;i--)  </div><div class="line">        <span class="keyword">if</span>(a[i]&gt;a[i-1])               //从最后每相邻的两个进行比较，如果有前面一个比后面的小（i为较小位置，ii,为较大位置），那么此时一定存在一个排列比当前的大  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">for</span>(j=n;j&gt;=2 &amp;&amp; flag;j--)   //应该找这个较小的数的后面从最后开始比它大的第一个数  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(a[j]&gt;a[i-1])          //将它换到当前较小的位置上  </div><div class="line">                &#123;  </div><div class="line">                    tmp=a[j]; a[j]=a[i-1]; a[i-1]=tmp; flag=0;  </div><div class="line">                &#125;  </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!flag)                //较大数到最后进行逆序,即交换，这样就产生了下一个排列，原理类似于，找到下一个较大的作为开始位的数，然后将后面的数字从最小开始即升序  </div><div class="line">            &#123;  </div><div class="line">                tmp=a[i];  a[i]=a[n]; a[n]=tmp;  </div><div class="line">            &#125;</div><div class="line">        &#125;  </div><div class="line">    <span class="keyword">if</span>(flag)</div><div class="line">		<span class="built_in">return</span> 0;  </div><div class="line">    <span class="keyword">else</span></div><div class="line">		<span class="built_in">return</span> 1;  </div><div class="line">&#125;  </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    int n,i;  </div><div class="line">    <span class="keyword">while</span>(1)  </div><div class="line">    &#123;  </div><div class="line">        cin&gt;&gt;n;  </div><div class="line">        <span class="keyword">for</span>(i=1;i&lt;50;i++) a[i]=i;  </div><div class="line">        <span class="keyword">do</span>  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">for</span>(i=1;i&lt;=n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">"  "</span>;  </div><div class="line">            cout&lt;&lt;endl;  </div><div class="line">        &#125;<span class="keyword">while</span>(permutation(n));//一直产生排列，直到逆序数&lt;按照上面的方式&gt;(按从大到小)数为0；          </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码的思路为：<br>从末尾开始判断前一个元素是否小于后一个元素，若找不到向前推动搜寻数组的位置，若能找到，则说明可以找到比改数大的一个组合数。那么再定义j从末尾开始与i-1的大<br>小，若a[i-1]&lt;a[j]，那么交换两数的位置后再交换a[i]与a[n]的数值以确保大数排到了后面，一直执行permutation函数到满足题意。</p>
<h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><p>每行的末尾没有空格，所以需要讨论输出格式。</p>
<h2 id="1058"><a href="#1058" class="headerlink" title="1058"></a>1058</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147099951324.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147099951418.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147099951455.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147099951489.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/147099951531.png" alt=""></p>
<h3 id="题目要求-5"><a href="#题目要求-5" class="headerlink" title="题目要求"></a>题目要求</h3><p>定义了一个humble numbe，并找出第N个humble number。定义为：除了1以外仅有2，3，5，7一个或多个因子的数。</p>
<h3 id="参考AC代码-3"><a href="#参考AC代码-3" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">int n;</div><div class="line">typedef long long LL;</div><div class="line">LL data[5843];</div><div class="line">void <span class="function"><span class="title">init</span></span>()</div><div class="line">&#123;</div><div class="line">	int i=1,j=1,m=1,n=1;</div><div class="line">	int index=1;</div><div class="line">	data[index]=1;</div><div class="line">	<span class="keyword">while</span>(1)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(index==5843)</div><div class="line">			<span class="built_in">break</span>;</div><div class="line">		LL temp1=min(data[i]*2,data[j]*3);</div><div class="line">		LL temp2=min(data[m]*5,data[n]*7);</div><div class="line">		LL res=min(temp1,temp2);</div><div class="line">		<span class="keyword">if</span>(res==data[i]*2)</div><div class="line">			i++;</div><div class="line">		<span class="keyword">if</span>(res==data[j]*3)</div><div class="line">			j++;</div><div class="line">		<span class="keyword">if</span>(res==data[m]*5)</div><div class="line">			m++;</div><div class="line">		<span class="keyword">if</span>(res==data[n]*7)</div><div class="line">			n++;</div><div class="line">		<span class="keyword">if</span>(res!=data[index])</div><div class="line">			data[++index]=res;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	init();</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n &amp;&amp; n!=0)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n%10==1 &amp;&amp; n%100!=11)</div><div class="line">			cout&lt;&lt;<span class="string">"The "</span>&lt;&lt;n&lt;&lt;<span class="string">"st humble number is "</span>&lt;&lt;data[n]&lt;&lt;<span class="string">"."</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n%10==2 &amp;&amp; n%100!=12)</div><div class="line">			cout&lt;&lt;<span class="string">"The "</span>&lt;&lt;n&lt;&lt;<span class="string">"nd humble number is "</span>&lt;&lt;data[n]&lt;&lt;<span class="string">"."</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n%10==3 &amp;&amp; n%100!=13)</div><div class="line">			cout&lt;&lt;<span class="string">"The "</span>&lt;&lt;n&lt;&lt;<span class="string">"rd humble number is "</span>&lt;&lt;data[n]&lt;&lt;<span class="string">"."</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"The "</span>&lt;&lt;n&lt;&lt;<span class="string">"th humble number is "</span>&lt;&lt;data[n]&lt;&lt;<span class="string">"."</span>&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>先用data数组存放1-5842的humble number，接着判断n的末尾用哪种输出格式。data存放humble number的原理为：用这4个因子分别乘1，接着找出最小的数并判断是<br>属于哪个因子的，之后该因子的乘数+1，若res是一个新数，那么存入data数组，index再指向下一个位置，若index到了5843结束循环。</p>
<h3 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h3><p>在英语中11，12，13由于有对应的单词，所以不使用st，nd，rd，需要特别注意。另外此题需要用long long来储存数组，由于方便起见，可以用typedef把long long重新<br>定义为LL，可以节省书写速度。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM 1018-1022]]></title>
      <url>http://xuboming8.github.io/2016/08/30/ACM-1018-1022/</url>
      <content type="html"><![CDATA[<h1 id="HDOJ-ACM-1018-1022解答及思路"><a href="#HDOJ-ACM-1018-1022解答及思路" class="headerlink" title="HDOJ-ACM 1018-1022解答及思路"></a>HDOJ-ACM 1018-1022解答及思路</h1><h2 id="1018"><a href="#1018" class="headerlink" title="1018"></a>1018</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146962909378.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146962909426.png" alt=""><br><a id="more"></a></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14696290946.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/1469629095.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146962909531.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>给出一个小于100万的数字，求出它的阶乘的位数</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;cmath&gt;</span></div><div class="line">using namespace std;</div><div class="line">int sum(int n)</div><div class="line">&#123;</div><div class="line">	double sum=0;</div><div class="line">	<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">		sum+=<span class="built_in">log</span>10((double)i+1);</div><div class="line">	<span class="built_in">return</span> sum;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int N;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;N)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N;i++)</div><div class="line">		&#123;</div><div class="line">			int n,d;</div><div class="line">			cin&gt;&gt;n;</div><div class="line">			d=(int)sum(n)+1;</div><div class="line">			cout&lt;&lt;d&lt;&lt;endl;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>推导出一个正整数a的位数，如下:</p>
<div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146962909572.png" alt=""><br></div>

<p>接下来</p>
<div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146962909622.png" alt=""><br></div>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在写代码前先理清思路，在不能轻易算出100万这样的大数阶乘的情况下，从一般规律入手往往会得到简化。</p>
<h2 id="1019"><a href="#1019" class="headerlink" title="1019"></a>1019</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146967950581.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146967950627.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146967950663.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146967950698.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146967950738.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>输出n个数字的最小公倍数</p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">long long GCD(long long a,long long b)</div><div class="line">&#123;</div><div class="line">	int ex,c;</div><div class="line">	<span class="keyword">if</span>(a&lt;b)</div><div class="line">	&#123;</div><div class="line">		ex=a, a=b, b=ex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(b!=0)</div><div class="line">	&#123;</div><div class="line">		c=a%b;</div><div class="line">		a=b;</div><div class="line">		b=c;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> a;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int N,M,gcd;</div><div class="line">	long long a,t;</div><div class="line">	cin&gt;&gt;N;</div><div class="line">	<span class="keyword">while</span>(N--)</div><div class="line">	&#123;</div><div class="line">		cin&gt;&gt;M;</div><div class="line">		t=1;</div><div class="line">		<span class="keyword">for</span>(int j=1;j&lt;=M;j++)</div><div class="line">		&#123;</div><div class="line">			cin&gt;&gt;a;</div><div class="line">			gcd=GCD(t,a);</div><div class="line">			t=(t*a)/gcd;</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;t&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>先写出2个函数判断出2个数的最大公因数和最小公倍数，最小公倍数=两数之积/最大公因数。接着输入数据，每输入2个数字就立刻判断出它的最小公倍数，接着把它<br>和下一个数字比较，循环得出最后的最小公倍数。</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>此题很容易超时和wrong answer。判断最大公因数的时候采用辗转相除法，可大大减少运算时间。而此题输入的数据均要采用long long型，使用int和long型都会提<br>示wrong answer。</p>
<h2 id="1020"><a href="#1020" class="headerlink" title="1020"></a>1020</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146968586973.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146968587033.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146968587108.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146968587221.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14696858726.png" alt=""></p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>要求把字符串实现合并同类项。</p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int N,n;</div><div class="line">	char a[10001];</div><div class="line">	cin&gt;&gt;N;</div><div class="line">	<span class="keyword">while</span>(N--)</div><div class="line">	&#123;</div><div class="line">		int i=0,count=1;</div><div class="line">		cin&gt;&gt;a;</div><div class="line">		n=strlen(a);</div><div class="line">		<span class="keyword">while</span>(i&lt;n)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(a[i]==a[i+1])</div><div class="line">			&#123;</div><div class="line">				count++;</div><div class="line">				i++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(count==1)</div><div class="line">				&#123;</div><div class="line">					cout&lt;&lt;a[i];</div><div class="line">					i++;</div><div class="line">					count=1;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>(count&gt;1)</div><div class="line">				&#123;</div><div class="line">					cout&lt;&lt;count&lt;&lt;a[i];</div><div class="line">					i++;</div><div class="line">					count=1;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>判断每一位的字符和下一个字符是否相等。若相等count++，接着进入循环判断下一个位置。若不相等则输出该字符和出现的次数，注意要讨论下次数为1不输出1即<br>可，count要再初始化为1进行下一轮判断。</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意下一轮的判断count要赋值为1即可。</p>
<h2 id="1021"><a href="#1021" class="headerlink" title="1021"></a>1021</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146969038714.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146969038757.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146969038795.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146969038829.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146969038868.png" alt=""></p>
<h3 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h3><p>类似于斐波拉契数列。前2项和7和11，求第n项是否能被3整除。</p>
<h3 id="参考AC代码-3"><a href="#参考AC代码-3" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int n,a[1000000];</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n)</div><div class="line">	&#123;</div><div class="line">		a[0]=7%3;</div><div class="line">		a[1]=11%3;</div><div class="line">		<span class="keyword">for</span>(int i=2;i&lt;=n;i++)</div><div class="line">			a[i]=(a[i-1]+a[i-2])%3;</div><div class="line">		<span class="keyword">if</span>(a[n]==0)</div><div class="line">			cout&lt;&lt;<span class="string">"yes"</span>&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"no"</span>&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>公式：（a+b）%m=（a%m+b%m）%m。所以叠加的时候只需要加上每项除以3的余数即可。</p>
<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>此题很容易超时或者超内存。尽量避免使用递归调用，运用上述公式可大大减少计算量。</p>
<h2 id="1022"><a href="#1022" class="headerlink" title="1022"></a>1022</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146989349538.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146989349585.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146989349621.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14698934966.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146989349693.png" alt=""></p>
<h3 id="题目要求-4"><a href="#题目要求-4" class="headerlink" title="题目要求"></a>题目要求</h3><p>模拟栈的原理。有最多9辆火车进站，给出进站顺序和出战顺序，判断是否可行。</p>
<h3 id="参考AC代码-4"><a href="#参考AC代码-4" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int n;  </div><div class="line">char input[15],output[15];  </div><div class="line">int <span class="function"><span class="title">main</span></span>()  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;input&gt;&gt;output)</div><div class="line">    &#123;  </div><div class="line">        int stack[15],top=0;  </div><div class="line">        int flag[15];  </div><div class="line">        int i=0,A=0,B=0,ok=1;  </div><div class="line">        <span class="keyword">while</span>(B&lt;=n)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span>(input[A]==output[B]) &#123;A++;B++;flag[i++]=1;flag[i++]=0;&#125;   </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(top&amp;&amp;stack[top]==output[B]) &#123;flag[i++]=0;top--;B++;&#125;//出栈   </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(A&lt;=n) &#123;stack[++top]=input[A++];flag[i++]=1;&#125; //进栈  </div><div class="line">            <span class="keyword">else</span> &#123;ok=0;<span class="built_in">break</span>;&#125;  </div><div class="line">			/*cout&lt;&lt;stack[top]&lt;&lt;<span class="string">" "</span>&lt;&lt;top&lt;&lt;<span class="string">" "</span>&lt;&lt;A&lt;&lt;<span class="string">" "</span>&lt;&lt;flag[i-1]&lt;&lt;<span class="string">" "</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;B&lt;&lt;endl;*/</div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span>(ok)  </div><div class="line">        &#123;  </div><div class="line">            cout&lt;&lt;<span class="string">"Yes."</span>&lt;&lt;endl;</div><div class="line">			<span class="keyword">for</span>(int j=0;j&lt;i-2;j++)  </div><div class="line">            &#123;  </div><div class="line">				<span class="keyword">if</span>(flag[j])</div><div class="line">					cout&lt;&lt;<span class="string">"in"</span>&lt;&lt;endl;</div><div class="line">				<span class="keyword">else</span></div><div class="line">					cout&lt;&lt;<span class="string">"out"</span>&lt;&lt;endl;</div><div class="line">            &#125;  </div><div class="line">        &#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"No."</span>&lt;&lt;endl;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"FINISH\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>　　此题极为重要，大多数人是第一次进行模拟栈。以下附给出解除第19行注释输出后的运行结果</p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146989392449.png" alt=""><br></div><br>　　该图可以清楚的看出6次循环每一步带来的变化。<br>　　用数组stack来模拟栈数据的存放，ok判断结果yes或no，flag用来判断若为yes后in和out的输出，top代表栈顶。while循环体的具体执行步骤是：第一步判断进入和<br>离开的数字是否相等，若相等，该火车直接进站后出战即可，A，B自加1，flag连续2个元素赋值为1和0，代表了in后out。不满足第一步则进行第二步判断出栈，若<br>栈顶没有到底部并且栈顶的元素和离开的元素相等，那么该元素离栈，flag该位置定义为0，B自增。前两步都不满足则进行第三步判断进栈，若A小于等于元素的个数。<br>则进栈，A自加。flag该位置定义为1。若前三步都不满足，则进行第四步，ok定义为0并且结束循环。最后若ok=1输出yes并按照flag的顺序，若为0输出out，若为1输<br>出in。</p>
<h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><p>　　该题的top初值必须赋为0而不能是-1，赋为0后实际存储的位置下标是用stack[1]开始的，这样在最后判断是够到达栈底不会因为top=-1而数组越界。而A和B都必须判断<br>为小于等于n而不能是小于n。while的循环体如果执行到最后是yes则会多执行一次。如图所示实际执行了6次循环体而不是5次，因为第6次进入的时候input[A]和ouput[B]<br>必然相等，因为都没被初始化过，B自增后不再满足while循环后退出，不会影响最后结果。并且当最后的结果为no时，会多执行进栈的那一步，会把没有初始化的元素赋<br>给stack，但也并不影响结果，因为下一个循环会因为均不满足前三次而直接执行第4步退出循环。所以修改代码若将小于等于号为小于号则得不到正确结果，多执行一步<br>可以满足该循环在yes和no的两种情况下都可以输出正确结果。若输出的结果为yes，因为多执行了1次第一步，所以i的元素多加了2，所以在最后输出flag元素的时候必<br>须写成j&lt;i-2而不是j&lt;i。该图stack存放的数据是49和50是因为把字符数据赋给了整型数组。最后输出格式也要留意。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM 1013-1017]]></title>
      <url>http://xuboming8.github.io/2016/08/30/ACM-1013-1017/</url>
      <content type="html"><![CDATA[<h1 id="HDOJ-ACM-1013-1017解答及思路"><a href="#HDOJ-ACM-1013-1017解答及思路" class="headerlink" title="HDOJ-ACM 1013-1017解答及思路"></a>HDOJ-ACM 1013-1017解答及思路</h1><h2 id="1013"><a href="#1013" class="headerlink" title="1013"></a>1013</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146943280805.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146943280846.png" alt=""><br><a id="more"></a></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146943280882.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146943280916.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14694328095.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>计算一个数字每位数之和，小于9时输出。</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	char a[1000];</div><div class="line">	int b[1000];</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;a&amp;&amp;a[0]!=<span class="string">'0'</span>)</div><div class="line">	&#123;</div><div class="line">		int len=strlen(a);</div><div class="line">		int sum=0;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;len;i++)</div><div class="line">		&#123;</div><div class="line">			b[i]=a[i]-<span class="string">'0'</span>;</div><div class="line">			sum+=b[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(sum&gt;9)</div><div class="line">			sum=sum/1000+sum%1000/100+sum%100/10+sum%10;</div><div class="line">		cout&lt;&lt;sum&lt;&lt;endl;</div><div class="line">	&#125;		</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>用字符数组接收转换成整形数组，位数之和大于9进入循环。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>需要用数组接受字符，运用大数操作的原理。</p>
<h2 id="1014"><a href="#1014" class="headerlink" title="1014"></a>1014</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146945584328.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146945584376.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146945584583.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146945584779.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146945584978.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>满足表达式seed(x+1) = [seed(x) + STEP] % MOD，seed（0）=0，如果在seed中能输出0到mod-1中所有的数字则成功，否则失败。</p>
<h3 id="参考AC代码-一"><a href="#参考AC代码-一" class="headerlink" title="参考AC代码(一)"></a>参考AC代码(一)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;iomanip&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int step,mod,flag=1;</div><div class="line">	bool a[100050];</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;step&gt;&gt;mod)</div><div class="line">	&#123;</div><div class="line">		int seed=0;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;mod;i++)</div><div class="line">			a[i]=<span class="literal">false</span>;</div><div class="line">		<span class="keyword">do</span></div><div class="line">		&#123;</div><div class="line">			seed=(seed+step)%mod;</div><div class="line">			a[seed]=<span class="literal">true</span>;</div><div class="line">		&#125;<span class="keyword">while</span>(seed!=0);</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;mod;i++)</div><div class="line">			<span class="keyword">if</span>(a[i]==<span class="literal">false</span>)</div><div class="line">				flag=0;</div><div class="line">		<span class="keyword">if</span>(flag)</div><div class="line">			cout&lt;&lt;setw(10)&lt;&lt;step&lt;&lt;setw(10)&lt;&lt;mod&lt;&lt;<span class="string">"    "</span>&lt;&lt;<span class="string">"Good Choice"</span>&lt;&lt;endl&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;setw(10)&lt;&lt;step&lt;&lt;setw(10)&lt;&lt;mod&lt;&lt;<span class="string">"    "</span>&lt;&lt;<span class="string">"Bad Choice"</span>&lt;&lt;endl&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-参考AC代码（二）"><a href="#C-参考AC代码（二）" class="headerlink" title="C++参考AC代码（二）"></a>C++参考AC代码（二）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;iomanip&gt;</span></div><div class="line"><span class="comment">#define min(a,b) a&lt;b?a:b</span></div><div class="line">using namespace std;</div><div class="line">int prime(int a,int b)</div><div class="line">&#123;</div><div class="line">	int c=min(a,b);</div><div class="line">	<span class="keyword">for</span>(int i=2;i&lt;=c;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>((a%i==0)&amp;&amp;(b%i==0))</div><div class="line">			<span class="built_in">return</span> 0;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="built_in">continue</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 1;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int step,mod;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;step&gt;&gt;mod)</div><div class="line">	&#123;</div><div class="line">		int flag=prime(step,mod);</div><div class="line">		<span class="keyword">if</span>(flag)</div><div class="line">			cout&lt;&lt;setw(10)&lt;&lt;step&lt;&lt;setw(10)&lt;&lt;mod&lt;&lt;<span class="string">"    "</span>&lt;&lt;<span class="string">"Good Choice"</span>&lt;&lt;endl&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;setw(10)&lt;&lt;step&lt;&lt;setw(10)&lt;&lt;mod&lt;&lt;<span class="string">"    "</span>&lt;&lt;<span class="string">"Bad Choice"</span>&lt;&lt;endl&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>AC代码（1）：先定义一个bool型数组并且按照mod的长度全部定义为false，接着当seed不为0的时候进入循环按照表达式计算，每计算一次，数组中第seed位的数值<br>变为true，如果退出循环后数组中有一个flase则输出badchoice，不然输出good choice。<br>AC代码（2）：该方法很简便而且很巧，只要step和mod互质，则结果为good choice，否则，seed数组的值一定是相邻的两个数字相差它们的最小公约数的值，为<br>bad choice。</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意输出格式，printf中输出%10d，cout中设置setw（10），在没有发现规律二的情况下用第一种方法解题也可。</p>
<h2 id="1015"><a href="#1015" class="headerlink" title="1015"></a>1015</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146950000444.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146950000498.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146950000535.png" alt=""></p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>输入1个小于1200万的数字作为target，再输入一个不能重复的大写英文字符串，在字符串中找出按照字典数顺序的5个字符满足v - w^2 + x^3 - y^4 + z^5 = target,<br>若满足输出5个字符，若不存在输出no solution。若存在多个，输出字典序最大的。</p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line">int N;</div><div class="line">char str[15],b[28]=&#123;<span class="string">"0ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>&#125;;</div><div class="line">bool cmp(int a,int b)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> a&gt;b;</div><div class="line">&#125;</div><div class="line">void <span class="function"><span class="title">find</span></span>()</div><div class="line">&#123;</div><div class="line">	int a[15],len;</div><div class="line">	len=strlen(str);</div><div class="line">	<span class="keyword">for</span>(int i=0;i&lt;len;i++)</div><div class="line">		a[i]=str[i]-<span class="string">'A'</span>+1;</div><div class="line">	sort(a,a+len,cmp);</div><div class="line">	<span class="keyword">for</span>(int i=0;i&lt;len;i++)</div><div class="line">		<span class="keyword">for</span>(int j=0;j&lt;len;j++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(i==j)</div><div class="line">				<span class="built_in">continue</span>;</div><div class="line">			<span class="keyword">for</span>(int p=0;p&lt;len;p++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(p==i||p==j)</div><div class="line">					<span class="built_in">continue</span>;</div><div class="line">				<span class="keyword">for</span>(int q=0;q&lt;len;q++)</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(q==i||q==j||q==p)</div><div class="line">						<span class="built_in">continue</span>;</div><div class="line">					<span class="keyword">for</span>(int k=0;k&lt;len;k++)</div><div class="line">					&#123;</div><div class="line">						<span class="keyword">if</span>(k==i||k==j||k==q||k==q)</div><div class="line">							<span class="built_in">continue</span>;</div><div class="line">						<span class="keyword">if</span>(a[i] - a[j]*a[j] + a[p]*a[p]*a[p] - a[q]*a[q]*a[q]*a[q] + a[k]*a[k]*a[k]*a[k]*a[k] == N)</div><div class="line">						&#123;</div><div class="line">							cout&lt;&lt;b[a[i]]&lt;&lt;b[a[j]]&lt;&lt;b[a[p]]&lt;&lt;b[a[q]]&lt;&lt;b[a[k]]&lt;&lt;endl;</div><div class="line">							<span class="built_in">return</span>;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	cout&lt;&lt;<span class="string">"no solution"</span>&lt;&lt;endl;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;N&gt;&gt;str)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(N==0&amp;&amp;strcmp(str,<span class="string">"END"</span>)==0)</div><div class="line">			<span class="built_in">break</span>;</div><div class="line">		find();</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>建立一个数组顺序存放A-Z所有大写字母，并且要注意第一位空出来（我直接补了一个数字0），这样才能把A-Z与1-26对应起来。搜索的时候要把输入的字符串变为对<br>应代表的数字存放在一个数组中并按照降序排列，再从第一位开始套用5个for循环，如果字母对应的数字相同的话continue，直到进入最后一个循环的时候判断表达<br>式是否成立，若成立输出字符，不成立输出no solution。字符输出的时候要用到之前存放大写字母的数组，每个字母都在数组中对应代表数字的位置。找到第一个满<br>足的直接return结束函数，此时就是字典序最大的。</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>数组的输入输出以及整型变字符型和字符型转整型很重要，要牢记。</p>
<h2 id="1016"><a href="#1016" class="headerlink" title="1016"></a>1016</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146958882104.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146958882152.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146958882187.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146958882227.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146958882258.png" alt=""></p>
<h3 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h3><p>要求把n个数构成一个圆形，要求每相邻的两个数的和都是质数。</p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;math.h&gt;</span></div><div class="line">using namespace std;</div><div class="line">bool b[20];</div><div class="line">int a[20],n;</div><div class="line">int prime(int num)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(int i=2;i&lt;=sqrt((double)num);i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(num%i==0)</div><div class="line">			<span class="built_in">return</span> 0;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 1;</div><div class="line">&#125;</div><div class="line">void DFS(int num)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(n==num&amp;&amp;(prime(1+a[n-1])==1))</div><div class="line">	&#123;</div><div class="line">		cout&lt;&lt;a[0];</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			cout&lt;&lt;<span class="string">" "</span>&lt;&lt;a[i];</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(int i=2;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>((b[i]==<span class="literal">false</span>)&amp;&amp;prime(i+a[num-1])==1)</div><div class="line">			&#123;</div><div class="line">				a[num]=i;</div><div class="line">				b[i]=<span class="literal">true</span>;</div><div class="line">				DFS(num+1);</div><div class="line">				b[i]=<span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	static int x=1;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;n)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;n;i++)</div><div class="line">			b[i]=<span class="literal">false</span>;</div><div class="line">		a[0]=1;</div><div class="line">		cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;x&lt;&lt;<span class="string">":"</span>&lt;&lt;endl;</div><div class="line">		x++;</div><div class="line">		DFS(1);</div><div class="line">		cout&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>本题用深度搜索算法较为简单。用数组a存放输出的数据，用数组b判断某数是否在前面已经出现过，将b按照n的大小全部初始化为false，接着哪个数字出现了，就把<br>那个数字对应位置的元素改为true进入DFS后，先判断是否为到了最后一步，若最后一个数和第一个数依然满足和为质数，则满足条件输出。不然的话进入循环开始<br>从2-n依次判断和前一个数的和是否为质数，并且判断该位置是否为false，都满足的话，把该数存入a，b中对应位置变为true，再深搜下一个数，若没有满足条件回<br>到了开始的循环中，则b中改位置的元素改回false。</p>
<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>若DFS（num+1）深搜后不满足条件返回来了，那么b[i]的值要变回false。此题的输出格式也要注意，每一行的末尾不能有空格。</p>
<h2 id="1017"><a href="#1017" class="headerlink" title="1017"></a>1017</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14696054029.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146960540337.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146960540374.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146960540407.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146960540441.png" alt=""></p>
<h3 id="题目要求-4"><a href="#题目要求-4" class="headerlink" title="题目要求"></a>题目要求</h3><p>N个输入模块。每个模块中输入n和m2个数字，在1-n中寻找整数对（a，b），其中0&lt;a&lt;b&lt;n,输出满足表达式(a^2+b^2 +m)/(ab)的个数</p>
<h3 id="参考AC代码-3"><a href="#参考AC代码-3" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#incldue&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int N,n,m;</div><div class="line">	cin&gt;&gt;N;</div><div class="line">	<span class="keyword">for</span>(int p=1;p&lt;=N;p++)</div><div class="line">	&#123;</div><div class="line">		int flag=1;</div><div class="line">		<span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m &amp;&amp; !(n==0&amp;&amp;m==0))</div><div class="line">		&#123;</div><div class="line">			int a,b,count=0;</div><div class="line">			<span class="keyword">for</span>(int i=1;i&lt;n;i++)</div><div class="line">			&#123;</div><div class="line">				a=i;</div><div class="line">				<span class="keyword">for</span>(int j=a+1;j&lt;n;j++)</div><div class="line">				&#123;</div><div class="line">					b=j;</div><div class="line">					<span class="keyword">if</span>((a*a+b*b+m)%(a*b)==0)</div><div class="line">						count++;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;flag++&lt;&lt;<span class="string">": "</span>&lt;&lt;count&lt;&lt;endl;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(p!=N)</div><div class="line">			cout&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>利用2个for循环分别找出a和b。</p>
<h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><p>此题的输出格式非常重要，题目给出的输出格式是错的。正确的是N和第一个输入模块中没有空行，最后一行也没有空行，只有在模块之间才有空行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM 1008-1012]]></title>
      <url>http://xuboming8.github.io/2016/08/30/ACM-1008-1012/</url>
      <content type="html"><![CDATA[<h1 id="HDOJ-ACM-1008-1012解答及思路"><a href="#HDOJ-ACM-1008-1012解答及思路" class="headerlink" title="HDOJ-ACM 1008-1012解答及思路"></a>HDOJ-ACM 1008-1012解答及思路</h1><h2 id="1008"><a href="#1008" class="headerlink" title="1008"></a>1008</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146925259674.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146925259723.png" alt=""><br><a id="more"></a></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146925259757.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14692525979.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146925259831.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>计算电梯的运行时间</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int upp(int a,int b)</div><div class="line">&#123;</div><div class="line">	int sum,diff;</div><div class="line">	diff=b<span class="_">-a</span>;</div><div class="line">	sum=6*diff+5;</div><div class="line">	<span class="built_in">return</span> sum;</div><div class="line">&#125;</div><div class="line">int down(int a,int b)</div><div class="line">&#123;</div><div class="line">	int sum,diff;</div><div class="line">	diff=a-b;</div><div class="line">	sum=4*diff+5;</div><div class="line">	<span class="built_in">return</span> sum;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int N,p[105]=&#123;0&#125;;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;N&amp;&amp;(N!=0))</div><div class="line">	&#123;</div><div class="line">		int sum=0;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=N;i++)</div><div class="line">			cin&gt;&gt;p[i];</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(p[i]&lt;p[i+1])</div><div class="line">				sum+=upp(p[i],p[i+1]);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				sum+=down(p[i],p[i+1]);</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;sum&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>把电梯上升和下降的情况分开考虑即可。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>电梯不是每一层都停，只有在起始和末尾位置才停5s。</p>
<h2 id="1009"><a href="#1009" class="headerlink" title="1009"></a>1009</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146926752542.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14692675259.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146926752628.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146926752661.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146926752698.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>老鼠准备了M磅的猫食准备和N个房间的猫进行交换食物，N个房间中第i个房间存贮了J[i]磅的食物，需要F[i]磅的猫食才能交换，老鼠可以付出F[i]×a%磅的猫食即<br>可换回J[i]×a%磅的食物，求老鼠可以得到的最大食物量。</p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;algorithm&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">struct Node</div><div class="line">&#123;</div><div class="line">	double j,f,p;</div><div class="line">&#125;a[1001];</div><div class="line">bool cmp(const Node a,const Node b)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> a.p&gt;b.p;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int M,N;</div><div class="line">	<span class="keyword">while</span>(scanf(<span class="string">"%d%d"</span>,&amp;M,&amp;N)!=EOF&amp;&amp;(M!=-1)&amp;&amp;(N!=-1))</div><div class="line">	&#123;</div><div class="line">		double sum=0.0;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N;i++)</div><div class="line">		&#123;</div><div class="line">			cin&gt;&gt;a[i].j&gt;&gt;a[i].f;</div><div class="line">			a[i].p=a[i].j/a[i].f;</div><div class="line">		&#125;</div><div class="line">		sort(a,a+N,cmp);</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(a[i].f&lt;M)</div><div class="line">			&#123;</div><div class="line">				sum+=a[i].j;</div><div class="line">				M-=a[i].f;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				sum+=a[i].p*M;</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,sum);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>运用贪心算法，先算出每个房间可以换取javabeen的性价比用sort按照降序排列，从性价比最高的开始交换，全部交换完之后到性价比次之的房间，如果剩余的猫食<br>不足以全部满足该仓库的需要的猫食，则交换出全部的猫食换取javabeen后结束循环。</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>该代码在G++中超时，在C++中即可AC。算出性价比按照降序排列后从高到低依次交换是本题的关键。</p>
<h2 id="1010"><a href="#1010" class="headerlink" title="1010"></a>1010</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146934165953.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146934166006.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14693416604.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14693416608.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146934166121.png" alt=""></p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>输入一个矩阵，“.”代表可以通过，“S”表示起点，“D”表示终点，“X”表示墙，只能横着走或者竖着走，一个地方只可以走一次，问在t时刻能否恰好逃出去</p>
<h3 id="参考AC代码-2"><a href="#参考AC代码-2" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line"><span class="comment">#include&lt;math.h&gt;</span></div><div class="line">using namespace std;</div><div class="line">char map[9][9];               //地图最多不超过7行7列,又从(1,1)计算,所以开辟9,9 </div><div class="line">int M,N,T,di,dj;              //给定的三个量,以及终点位置  </div><div class="line">bool escape;                  //标识逃生成功 </div><div class="line">int Dir[4][2]=&#123;&#123;0,-1&#125;,&#123;0,1&#125;,&#123;1,0&#125;,&#123;-1,0&#125;&#125;;       //分别表示左、右、下、上四个方向</div><div class="line">void DFS(int si,int sj,int t)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(si==0||si&gt;N||sj==0||sj&gt;M)     //越出边界便不搜索  </div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	<span class="keyword">if</span>(si==di&amp;&amp;sj==dj&amp;&amp;T==t)</div><div class="line">	&#123;</div><div class="line">		escape=1;               //时间正好的时候才能逃生  </div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	int temp=abs(T-t)-(abs(si-di)+abs(sj-dj));     //计算当前到终点的最短路与还需要的时间差,若小于0则路径剪枝 </div><div class="line">	<span class="keyword">if</span>(temp&lt;0||temp%2==1)           //temp如果是奇数的话也要剪枝  </div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	<span class="keyword">for</span>(int i=0;i&lt;4;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(map[si+Dir[i][0]][sj+Dir[i][1]]!=<span class="string">'X'</span>)</div><div class="line">		&#123;</div><div class="line">			map[si+Dir[i][0]][sj+Dir[i][1]]=<span class="string">'X'</span>;       //把当前点刷为X </div><div class="line">			DFS(si+Dir[i][0],sj+Dir[i][1],t+1);        //搜索该点   </div><div class="line">			<span class="keyword">if</span>(escape)</div><div class="line">				<span class="built_in">return</span>;</div><div class="line">			 map[si+Dir[i][0]][sj+Dir[i][1]]=<span class="string">'.'</span>;       //如果搜索不到退出来了,则重新把该点刷为<span class="string">'.'</span></div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int si,sj;</div><div class="line">	<span class="keyword">while</span>((cin&gt;&gt;N&gt;&gt;M&gt;&gt;T)&amp;&amp;!(N==0&amp;&amp;M==0&amp;&amp;T==0))</div><div class="line">	&#123;</div><div class="line">		int wall=0;</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;=N;i++)</div><div class="line">			<span class="keyword">for</span>(int j=1;j&lt;=M;j++)</div><div class="line">			&#123;	</div><div class="line">				cin&gt;&gt;map[i][j];</div><div class="line">				<span class="keyword">if</span>(map[i][j]==<span class="string">'S'</span>)</div><div class="line">				&#123;</div><div class="line">					si=i,sj=j;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>(map[i][j]==<span class="string">'D'</span>)</div><div class="line">				&#123;</div><div class="line">					di=i,dj=j;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>(map[i][j]==<span class="string">'X'</span>)</div><div class="line">					wall++;</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">if</span>(N*M-wall&lt;=T)                  //路径剪枝,当走完不含墙的迷宫都还不到T时间将不能逃生  </div><div class="line">		&#123;</div><div class="line">			cout&lt;&lt;<span class="string">"NO"</span>&lt;&lt;endl;</div><div class="line">			<span class="built_in">continue</span>;</div><div class="line">		&#125;</div><div class="line">		escape=0;</div><div class="line">		map[si][sj]=<span class="string">'X'</span>;           //记得刷为<span class="string">'X'</span>  </div><div class="line">		DFS(si,sj,0);</div><div class="line">		<span class="keyword">if</span>(escape)</div><div class="line">			cout&lt;&lt;<span class="string">"YES"</span>&lt;&lt;endl; </div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;<span class="string">"NO"</span>&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>　　本题运用了深度搜索算法和剪枝算法。从（1，1）位置开始输入矩阵，记录下起点和终点的位置和墙的个数，如果走完所有没有的墙的位置后依旧小于时间T，那<br>么直接路径剪枝，把起点设为墙后进行深度搜素，如果越出边界那么不搜索结束函数，如果时间正好刚好的话escape返回值为1，再计算当前的最短路径如果小于需要<br>的时间差，那么路径剪枝，temp如果是奇数的话也要进行剪枝，草图如下</p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146934166156.png" alt=""><br></div><br>　　两种不同的走法，下面那一种可以控制时间刚好在T时刻。因为差出的是偶数，所以奇数的话要剪枝掉，省掉搜索时间。接下来进行该位置周围四个方向的前进，<br>如果不是墙的话进入循环，把当前点设为墙后搜索改点，如果成功后返回1，如果搜索不到退出来，那么重新把改点设为“.”。以此类推搜索完所有的点。</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>　　由于是向四个方面前进，所以map的输入要从（1，1）开始，数组要设置为9行9列，确保搜索数组的时候不会越界。本题也多处运用了剪枝，大大减少了运算时间。<br>起点要注意在出发后要设置为“X”，在搜索每一个点的时候该点都要设为“X”，搜索结束后重新变回原样。输出的“YES”和“NO”均为大写，本人因为错把NO的O写成了数字<br>0导致检查了2个多小时，所以注意在书写代码的时候不要粗心。</p>
<h2 id="1011"><a href="#1011" class="headerlink" title="1011"></a>1011</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146937199132.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146937199186.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146937199221.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146937199254.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146937199295.png" alt=""></p>
<h3 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h3><p>一棵树，有n个结点，每个结点有v个bug，有w的brain。我从1号结点开始走，带着m个战士。1个战士可以消灭20个bugs，如果我把某个结点的所有bug都消灭了我就能<br>得到那个结点的brain。如果想攻击当前结点，那么必须先攻击了它的父结点（1号点除外）。其中当你攻占了当前结点，你可以分派人手，走向几个不同的子结点，<br>去攻占更多。也就是说，不是单一的路径。</p>
<h3 id="参考AC代码-3"><a href="#参考AC代码-3" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#define N 105</span></div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">   int from,to,next;</div><div class="line">&#125;edge[2*N];</div><div class="line">int head[N],tol,visit[N],ans[N],bug[N],n,m,dp[N][N],f[N][N];</div><div class="line">void add(int a,int b)</div><div class="line">&#123;</div><div class="line">	 edge[tol].from=a;edge[tol].to=b;edge[tol].next=head[a];head[a]=tol++;</div><div class="line">&#125;</div><div class="line">int max(int a,int b)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> a&gt;b?a:b;</div><div class="line">&#125;</div><div class="line">void dfs(int u)</div><div class="line">&#123;     </div><div class="line">	int i,j,r,tt,k;</div><div class="line">	visit[u]=1;     </div><div class="line">	<span class="keyword">for</span>(i=head[u];i!=-1;i=edge[i].next)     </div><div class="line">	&#123;         </div><div class="line">		r=edge[i].to;</div><div class="line">		<span class="keyword">if</span>(!visit[r])</div><div class="line">		&#123;</div><div class="line">			dfs(r);</div><div class="line">			<span class="keyword">for</span>(k=m;k&gt;=1;k--)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">for</span>(j=1;j&lt;=k;j++)</div><div class="line">				&#123;</div><div class="line">					 f[u][k]=max(f[u][k],f[u][k-j]+dp[r][j]);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	tt=(ans[u]+19)/20;</div><div class="line">	<span class="keyword">for</span>(j=tt;j&lt;=m;j++)</div><div class="line">	dp[u][j]=f[u][j-tt]+bug[u];</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int i,a,b;</div><div class="line">	<span class="keyword">while</span>(scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n==-1 &amp;&amp; m==-1) <span class="built_in">break</span>;</div><div class="line">		<span class="keyword">for</span>(i=1;i&lt;=n;i++)</div><div class="line">		scanf(<span class="string">"%d%d"</span>,&amp;ans[i],&amp;bug[i]);</div><div class="line">		tol=0;</div><div class="line">		memset(head,-1,sizeof(head));</div><div class="line">		<span class="keyword">for</span>(i=1;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			scanf(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">			add(a,b);</div><div class="line">			add(b,a);</div><div class="line">		&#125;</div><div class="line">		memset(visit,0,sizeof(visit));</div><div class="line">		memset(dp,0,sizeof(dp));</div><div class="line">		memset(f,0,sizeof(f));</div><div class="line">		<span class="keyword">if</span>(m==0)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">			<span class="built_in">continue</span>;</div><div class="line">		&#125;</div><div class="line">		dfs(1);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[1][m]);</div><div class="line">	 &#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>树形dp问题，由于并未完全理解，所以未能提供思路，待更新。</p>
<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>待更新。</p>
<h2 id="1012"><a href="#1012" class="headerlink" title="1012"></a>1012</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146941754436.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146941754488.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146941754522.png" alt=""></p>
<h3 id="题目要求-4"><a href="#题目要求-4" class="headerlink" title="题目要求"></a>题目要求</h3><p>按照公式输出n为0-9所求出的e</p>
<h3 id="参考AC代码-4"><a href="#参考AC代码-4" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int fun(int n)</div><div class="line">&#123;</div><div class="line">	int sum=1;</div><div class="line">	<span class="keyword">if</span>(n==0)</div><div class="line">		<span class="built_in">return</span> 1;</div><div class="line">	<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</div><div class="line">		sum*=i;</div><div class="line">	<span class="built_in">return</span> sum;</div><div class="line">&#125;</div><div class="line">double fun2(int n)</div><div class="line">&#123;</div><div class="line">	double e=0.0;</div><div class="line">	<span class="keyword">for</span>(int i=0;i&lt;=n;i++)</div><div class="line">		e+=1.0/fun(i);</div><div class="line">	<span class="built_in">return</span> e;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	cout&lt;&lt;<span class="string">"n e"</span>&lt;&lt;endl&lt;&lt;<span class="string">"- -----------"</span>&lt;&lt;endl;</div><div class="line">	<span class="keyword">for</span>(int i=0;i&lt;=9;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(i&lt;=1)</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d %.0lf\n"</span>,i,fun2(i));</div><div class="line">		<span class="keyword">if</span>(i==2)</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d %.1lf\n"</span>,i,fun2(i));</div><div class="line">		<span class="keyword">if</span>(i&gt;2)</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d %.9lf\n"</span>,i,fun2(i));</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>按照题目要求写出函数即可。</p>
<h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意输出格式，如果对输出位数有苛刻的要求，请用printf输出而不要用iomanip中的setprecision。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM 1002-1007]]></title>
      <url>http://xuboming8.github.io/2016/08/30/ACM-1002-1007/</url>
      <content type="html"><![CDATA[<h1 id="1HDOJ-ACM-1002-1007解答及思路"><a href="#1HDOJ-ACM-1002-1007解答及思路" class="headerlink" title="1HDOJ-ACM 1002-1007解答及思路"></a>1HDOJ-ACM 1002-1007解答及思路</h1><h2 id="1002"><a href="#1002" class="headerlink" title="1002"></a>1002</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980110768.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146978509925.png" alt=""><br><a id="more"></a></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980110811.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980110847.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146978509969.png" alt=""></p>
<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>要求2个不超过1000位的大数（整形）相加 允许进行1-20次的相加操作</p>
<h3 id="C-参考AC代码"><a href="#C-参考AC代码" class="headerlink" title="C++参考AC代码"></a>C++参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int T,len1,len2,p;</div><div class="line">	cin&gt;&gt;T;</div><div class="line">	<span class="keyword">for</span>(int q=0;q&lt;T;q++)</div><div class="line">	&#123;</div><div class="line">		char s1[1000],s2[1000];</div><div class="line">		int num1[1000]=&#123;0&#125;,num2[1000]=&#123;0&#125;;</div><div class="line">		cin&gt;&gt;s1&gt;&gt;s2;</div><div class="line">		<span class="keyword">if</span>((s1[0]==<span class="string">'0'</span>)&amp;&amp;(s2[0]==<span class="string">'0'</span>))</div><div class="line">		&#123;</div><div class="line">			cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;q+1&lt;&lt;<span class="string">":"</span>&lt;&lt;endl&lt;&lt;<span class="string">"0 + 0 = 0"</span>&lt;&lt;endl;</div><div class="line">			<span class="keyword">if</span>(q!=T-1)</div><div class="line">				cout&lt;&lt;endl;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			len1=strlen(s1);</div><div class="line">			len2=strlen(s2);</div><div class="line">			<span class="keyword">for</span>(int i=len1-1,j=0;i&gt;=0;i--)</div><div class="line">				num1[j++]=s1[i]-<span class="string">'0'</span>;</div><div class="line">			<span class="keyword">for</span>(int i=len2-1,j=0;i&gt;=0;i--)</div><div class="line">				num2[j++]=s2[i]-<span class="string">'0'</span>;</div><div class="line">			<span class="keyword">for</span>(int i=0;i&lt;1000;i++)</div><div class="line">			&#123;</div><div class="line">				num1[i]+=num2[i];</div><div class="line">				<span class="keyword">if</span>(num1[i]&gt;9)</div><div class="line">				&#123;</div><div class="line">					num1[i]-=10;</div><div class="line">					num1[i+1]++;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;q+1&lt;&lt;<span class="string">":"</span>&lt;&lt;endl;</div><div class="line">			cout&lt;&lt;s1&lt;&lt;<span class="string">" + "</span>&lt;&lt;s2&lt;&lt;<span class="string">" = "</span>;</div><div class="line">			<span class="keyword">for</span>(p=999;(p&gt;=0)&amp;&amp;(num1[p]==0);p--);</div><div class="line">			<span class="keyword">for</span>(;p&gt;=0;p--)</div><div class="line">				cout&lt;&lt;num1[p];</div><div class="line">			cout&lt;&lt;endl;</div><div class="line">			<span class="keyword">if</span>(q!=T-1)</div><div class="line">				cout&lt;&lt;endl;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>输入2个大数分别存放在s1和s2两个字符数组中，再分别定义2个足够大的整型数组num1和num2并且把所有元素初始化为0，把s1和s2中的字符转变成整数倒序存在在<br>num1和num2中，然后进行对应位数相加，如果大于10的话，自减10并且后一位加1，结果存放在num1中，接着用一个带分号的for循环从最后一位开始判断，如果位数<br>大于0并且数组对应位数的值为0的话，位置下标自减1，直到对应的数字不是0为止开始输出，把数据再正向输出出来<br>，就是所要的结果。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>以上方法没有考虑到0+0=0的情况，需要额外考虑，并且注意输出格式，Case的C要大写而且要注意输出时的空格，最后一行不需要换行，要用for循环判断是否为最<br>后一行。</p>
<h2 id="1003"><a href="#1003" class="headerlink" title="1003"></a>1003</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980116849.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980116888.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980116924.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980116957.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14698011699.png" alt=""></p>
<h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><p>要求输入一串数字后找出其中和最大的子数列并且输出最大值以及这一串的起始和终止位置</p>
<h3 id="C-参考AC代码-1"><a href="#C-参考AC代码-1" class="headerlink" title="C++参考AC代码"></a>C++参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int T,N,a[100000],begin,end,position,sum,max;</div><div class="line">	cin&gt;&gt;T;</div><div class="line">	<span class="keyword">for</span>(int j=0;j&lt;T;j++)</div><div class="line">	&#123;</div><div class="line">		cin&gt;&gt;N;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N;i++)</div><div class="line">			cin&gt;&gt;a[i];</div><div class="line">		begin=end=position=0;</div><div class="line">		sum=max=a[0];</div><div class="line">		<span class="keyword">for</span>(int i=1;i&lt;N;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(sum+a[i]&lt;a[i])</div><div class="line">			&#123;</div><div class="line">				sum=a[i];</div><div class="line">				position=i;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				sum+=a[i];</div><div class="line">			<span class="keyword">if</span>(sum&gt;max)</div><div class="line">			&#123;</div><div class="line">				max=sum;</div><div class="line">				begin=position;</div><div class="line">				end=i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;<span class="string">"Case "</span>&lt;&lt;j+1&lt;&lt;<span class="string">":"</span>&lt;&lt;endl&lt;&lt;max&lt;&lt;<span class="string">" "</span>&lt;&lt;begin+1&lt;&lt;<span class="string">" "</span>&lt;&lt;end+1&lt;&lt;endl;</div><div class="line">		<span class="keyword">if</span>(j!=T-1)</div><div class="line">			cout&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>从第一个数据开始循环，第一个if语句判断最大子序列的起始位置，如果前n项的和小于第n+1项的话，起始位置移到第n+1项，sum变为n+1项的数值，如果前n项和大于<br>等于n+1项，那么sun加上第n+1项的竖直，第二个if语言判断目前的sum是否大于最大值max，如果大于，sum的值赋给max，把起始位置赋给begin，末尾位置t赋给end，<br>依次循环到数据末端结束，输出结果。</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意输出格式，如何找对起始位置于末尾位置以及判断是否为序列的最大值是关键。</p>
<h2 id="1004"><a href="#1004" class="headerlink" title="1004"></a>1004</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980122541.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/14698012258.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980122619.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980122668.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146980122704.png" alt=""></p>
<h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><p>找出字符串中出现次数最多的子字符串</p>
<h3 id="C-参考AC代码-2"><a href="#C-参考AC代码-2" class="headerlink" title="C++参考AC代码"></a>C++参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int N,max,flag;</div><div class="line">	char a[1050][20];</div><div class="line">	cin&gt;&gt;N;</div><div class="line">	<span class="keyword">while</span>(N!=0)</div><div class="line">	&#123;</div><div class="line">		int sum[1050]=&#123;0&#125;;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N;i++)</div><div class="line">			cin&gt;&gt;a[i];</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N;i++)</div><div class="line">			<span class="keyword">for</span>(int j=0;j&lt;N;j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(strcmp(a[i],a[j])==0)</div><div class="line">					sum[i]++;</div><div class="line">			&#125;</div><div class="line">		max=sum[0];</div><div class="line">		flag=0;</div><div class="line">		<span class="keyword">for</span>(int i=0;i&lt;N-1;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(max&lt;sum[i+1])</div><div class="line">			&#123;</div><div class="line">				max=sum[i+1];</div><div class="line">				flag=i+1;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		cout&lt;&lt;a[flag]&lt;&lt;endl;</div><div class="line">		cin&gt;&gt;N;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>用数组sum存贮每个字符串出现的次数，接着求出sum中最大元素的位置并输出该位置的字符串</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>二维数组输入输出可以使用首地址，数组sum的初始化为0要在while循环里进行。</p>
<h2 id="1005"><a href="#1005" class="headerlink" title="1005"></a>1005</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146898317535.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146898317572.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146898317611.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146898317646.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146898317685.png" alt=""></p>
<h3 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h3><p>类似于斐波拉契数列，已知f（1）=f（2）=1，f（n）=(A×f(A,B,n-1)+B×f(A,B,n-2))%7，求f（n）</p>
<h3 id="C-参考AC代码-一"><a href="#C-参考AC代码-一" class="headerlink" title="C++参考AC代码(一)"></a>C++参考AC代码(一)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int f(int A,int B,int n)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>((n==1)||(n==2))</div><div class="line">		<span class="built_in">return</span> 1;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">return</span> (A*f(A,B,n-1)+B*f(A,B,n-2))%7;</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int A,B,n;</div><div class="line">	cin&gt;&gt;A&gt;&gt;B&gt;&gt;n;</div><div class="line">	<span class="keyword">while</span>(!((A==0)&amp;&amp;(B==0)&amp;&amp;(n==0)))</div><div class="line">	&#123;</div><div class="line">		cout&lt;&lt;f(A,B,n%48)&lt;&lt;endl;</div><div class="line">		cin&gt;&gt;A&gt;&gt;B&gt;&gt;n;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-参考AC代码-二"><a href="#C-参考AC代码-二" class="headerlink" title="C++参考AC代码(二)"></a>C++参考AC代码(二)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;iostream&gt;</span></div><div class="line">using namespace std;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	int i,n,A,B;</div><div class="line">	int f[50],num;</div><div class="line">	<span class="keyword">while</span>(cin&gt;&gt;A&gt;&gt;B&gt;&gt;n &amp;&amp; (A || B || n))</div><div class="line">	&#123;</div><div class="line">		f[1] = 1;</div><div class="line">		f[2] = 1;</div><div class="line">		<span class="keyword">for</span>(i=3; i&lt;=49; i++)</div><div class="line">		&#123;</div><div class="line">			f[i] = (A * f[i-1] + B * f[i-2]) % 7;</div><div class="line">			<span class="keyword">if</span>(f[i] == f[i-1] &amp;&amp; f[i] == 1)</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">		&#125;</div><div class="line">		num = i-2;</div><div class="line">		n = n % num;</div><div class="line">		<span class="keyword">if</span>(n==0)</div><div class="line">			cout&lt;&lt;f[num]&lt;&lt;endl;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			cout&lt;&lt;f[n]&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>　　AC代码（1）：参考斐波拉契数列，但由于直接使用递归调用会提示超出内存，所以必须找到对应的周期。(A×f(A,B,n-1)+B×f(A,B,n-2))%7=((A×f(A,B,n-1))%7+<br>（B×f(A,B,n-2))%7)%7，由于取除以7的余数，所以有0，1，2，3，4，5，6七种情况，一共有7×7=49种情况，由于极端状况第49个数字会回到开头的第一个数字，所<br>以48为一个周期，n%48即可以把n转换到第一个周期内，大大减少了运算量。<br>　　AC代码（2）：直接算出最小周期，如果f[i] == f[i-1] &amp;&amp; f[i] == 1，即到了一个周期，由于多算了2步得到数字1，1才判断为一个周期，所以真实的周期是i-2，到了<br>周期处使用break跳出循环进一步减少了计算量，由于余数是0的情况会输出最后一项而不是第一项，所以需要额外考虑。</p>
<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>不可能直接用n使用递归调用，会超出内存，如果不使用周期可能也会超时，所以这题必须算出周期或者最小周期，来减少运算量。</p>
<h2 id="1006"><a href="#1006" class="headerlink" title="1006"></a>1006</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146916365491.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146916365498.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/1469163655.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146916365501.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146916365503.png" alt=""></p>
<h3 id="题目要求-4"><a href="#题目要求-4" class="headerlink" title="题目要求"></a>题目要求</h3><p>在一天的24小时内，求出三个指针两两至少相差D度的概率</p>
<h3 id="参考AC代码"><a href="#参考AC代码" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line">double max(double a,double b,double c)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> a&gt;b?(a&gt;c?a:c):(b&gt;c?b:c);</div><div class="line">&#125;</div><div class="line">double min(double a,double b,double c)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">return</span> a&lt;b?(a&lt;c?a:c):(b&lt;c?b:c);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()</div><div class="line">&#123;</div><div class="line">	double d,sum;</div><div class="line">	double Tsm=3600./59,Tsh=43200./719,Tmh=43200./11;</div><div class="line">	double happys,happye;</div><div class="line">	double sm=10./59,sh=120./719,mh=120./11;</div><div class="line">	double d_sm,d_sh,d_mh,not_d_sm,not_d_sh,not_d_mh;</div><div class="line">	<span class="keyword">while</span>(scanf(<span class="string">"%lf"</span>,&amp;d)!=EOF&amp;&amp;(d!=-1))</div><div class="line">	&#123;</div><div class="line">		sum=0;</div><div class="line">		d_sm=sm*d; not_d_sm=Tsm-d_sm;</div><div class="line">		d_sh=sh*d; not_d_sh=Tsh-d_sh;</div><div class="line">		d_mh=mh*d; not_d_mh=Tmh-d_mh;</div><div class="line">		happys=max(d_sm,d_sh,d_mh);</div><div class="line">		happye=min(not_d_sm,not_d_sh,not_d_mh);</div><div class="line">		<span class="keyword">while</span>((happys&lt;=43200)&amp;&amp;(happye&lt;=43200))</div><div class="line">		&#123;</div><div class="line">			happys=max(d_sm,d_sh,d_mh);</div><div class="line">			happye=min(not_d_sm,not_d_sh,not_d_mh);</div><div class="line">			<span class="keyword">if</span>(happys&lt;happye)</div><div class="line">				sum+=happye-happys;</div><div class="line">			<span class="keyword">if</span>(happye==not_d_sm)</div><div class="line">			&#123;d_sm+=Tsm;not_d_sm+=Tsm;&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(happye==not_d_sh)</div><div class="line">			&#123;d_sh+=Tsh;not_d_sh+=Tsh;&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(happye==not_d_mh)</div><div class="line">			&#123;d_mh+=Tmh;not_d_mh+=Tmh;&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,sum/43200*100);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>秒针的速度s=6°/s,分针是m=1/10°/s,时针是h=1/120°/s;<br>相对速度s_m=59/10°/s,s_h=719/120°/s,m_h=120/11°/s;<br>所以相差一度所需要的时间sm=10/59 s/°,sh=120/719 s/°,mh=120/11 s/°;<br>差360°的周期为Tsm=3600/59 s,Tsh=43200/719 s,Tmh=43200/11 s;<br>假设开始时从12点整开始，旋转至再均回到12点（即时针转一圈）<br>两两之间最后一个满足相差d°及以上的条件视为开始happy时刻<br>两两之间第一个不再满足相差d°及以上视为结束happy的时刻</p>
<h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><p>注意输出格式，以及两两相遇的周期，在写代码前先理清思路。</p>
<h2 id="1007"><a href="#1007" class="headerlink" title="1007"></a>1007</h2><p><strong>Problem Description</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146924123834.png" alt=""></p>
<p><strong>Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146924123878.png" alt=""></p>
<p><strong>Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146924123915.png" alt=""></p>
<p><strong>Sample Input</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146924123947.png" alt=""></p>
<p><strong>Sample Output</strong><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146924123988.png" alt=""></p>
<h3 id="题目要求-5"><a href="#题目要求-5" class="headerlink" title="题目要求"></a>题目要求</h3><p>最近点对问题</p>
<h3 id="参考AC代码-1"><a href="#参考AC代码-1" class="headerlink" title="参考AC代码"></a>参考AC代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;iostream&gt;  </span></div><div class="line"><span class="comment">#include &lt;algorithm&gt;  </span></div><div class="line"><span class="comment">#include &lt;cmath&gt;  </span></div><div class="line">using namespace std;  </div><div class="line">const int SIZE = 100005;  </div><div class="line">const int L = -1;  </div><div class="line">const int R = 1;   </div><div class="line"> typedef struct   </div><div class="line">&#123;  </div><div class="line">	int index;                    //用于标记左侧或者右侧</div><div class="line">	double x;  </div><div class="line">	double y;  </div><div class="line">&#125;coord;                           //用于记录坐标点 </div><div class="line">coord num[SIZE], c[SIZE];         //用作辅助数组，分别存放点的对象和候选点 </div><div class="line">double getDistance(coord &amp;bi1, coord &amp;bi2)             //计算两点之间的距离</div><div class="line">&#123;  </div><div class="line">	<span class="built_in">return</span> sqrt(pow(bi1.x - bi2.x, 2.0) + pow(bi1.y - bi2.y, 2.0));  </div><div class="line">&#125;   </div><div class="line">bool cmpx(coord &amp;bi1, coord &amp;bi2)     //按照x升序排列，如果x相同则按照y升序排列</div><div class="line">&#123;  </div><div class="line">	<span class="keyword">if</span> (bi1.x == bi1.x)  </div><div class="line">		<span class="built_in">return</span> bi1.y &lt; bi2.y;  </div><div class="line">	<span class="keyword">else</span>  </div><div class="line">	<span class="built_in">return</span> bi1.x &lt; bi2.x;  </div><div class="line">&#125;   </div><div class="line">bool cmpy(coord &amp;bi1, coord &amp;bi2)      //按照y升序排列，如果y相同则按照x升序排列</div><div class="line">&#123;  </div><div class="line">	<span class="keyword">if</span> (bi1.y == bi2.y)  </div><div class="line">		<span class="built_in">return</span> bi1.x &lt; bi2.x;  </div><div class="line">	<span class="keyword">else</span>  </div><div class="line">		<span class="built_in">return</span> bi1.y &lt; bi2.y;  </div><div class="line">&#125;  </div><div class="line">inline double min(double &amp;bi1, double &amp;bi2, double &amp;bi3)    //三个数求最小值</div><div class="line">&#123;   </div><div class="line">	double minLength;  </div><div class="line">	minLength = bi1 &gt; bi2 ? bi2 : bi1;  </div><div class="line">	minLength = minLength &gt; bi3 ? bi3 : minLength;  </div><div class="line">	<span class="built_in">return</span> minLength;  </div><div class="line">&#125;  </div><div class="line">inline double minDist(double &amp;bi1, double &amp;bi2)              //两个数求最小值</div><div class="line">&#123;  </div><div class="line">	<span class="keyword">if</span> (bi1 &gt; bi2)  </div><div class="line">		<span class="built_in">return</span> bi2;  </div><div class="line">	<span class="built_in">return</span> bi1;  </div><div class="line">&#125;  </div><div class="line">double divide_conquer(int low, int high)                 //分治法求最小距离</div><div class="line">&#123;  </div><div class="line">	double dis;  </div><div class="line">	int count = high - low;  </div><div class="line">	<span class="keyword">if</span> (count == 0)  </div><div class="line">	&#123;  </div><div class="line">		<span class="built_in">return</span> 0;  </div><div class="line">	&#125;  </div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (count == 1)                     //两个数</div><div class="line">	&#123;  </div><div class="line">		dis = getDistance(num[low], num[high]);  </div><div class="line">	&#125;  </div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (count == 2)                     //三个数</div><div class="line">	&#123;  </div><div class="line">		double temp1, temp2, temp3;  </div><div class="line">		temp1 = getDistance(num[low], num[low + 1]);  </div><div class="line">		temp2 = getDistance(num[low + 1], num[high]);  </div><div class="line">		temp3 = getDistance(num[low], num[high]);  </div><div class="line">		dis = min(temp1, temp2, temp3);  </div><div class="line">	&#125;  </div><div class="line">	<span class="keyword">else</span>                                      //大于三个数的情况 </div><div class="line">	&#123;  </div><div class="line">		double leftmin,rightmin,min;  </div><div class="line">		int mid = (low + high) / 2;  </div><div class="line">		int p = 0;  </div><div class="line">		int i, j;  </div><div class="line">  </div><div class="line">		leftmin = divide_conquer(low, mid);        //求得左边部分的最小值</div><div class="line">		rightmin = divide_conquer(mid + 1, high);  //求得右边部分的最小值</div><div class="line">		dis = minDist(leftmin, rightmin);  </div><div class="line">	  </div><div class="line">		<span class="keyword">for</span> (i = low; i &lt;= mid; i++)        //下面从所有坐标点中找出x在leftCoord到rightCoord之间的点</div><div class="line">		&#123;  </div><div class="line">			double leftCoord = num[mid].x - dis;  </div><div class="line">			<span class="keyword">if</span> (num[i].x &gt;= leftCoord)  </div><div class="line">			&#123;  </div><div class="line">				c[p].index = L;             //标志属于左边部分</div><div class="line">				c[p].x = num[i].x;  </div><div class="line">				c[p].y = num[i].y;  </div><div class="line">				p++;  </div><div class="line">			&#125;  </div><div class="line">		&#125;  </div><div class="line">		<span class="keyword">for</span> ( ; i &lt;= high; i++)  </div><div class="line">		&#123;  </div><div class="line">			double rightCoord = num[mid].x + dis;  </div><div class="line">			<span class="keyword">if</span> (num[i].x &lt;= rightCoord)  </div><div class="line">			&#123;  </div><div class="line">				c[p].index = R;              //标志属于右边部分</div><div class="line">				c[p].x = num[i].x;  </div><div class="line">				c[p].y = num[i].y;  </div><div class="line">				p++;  </div><div class="line">			&#125;  </div><div class="line">		&#125;  </div><div class="line">		sort(c, c + p, cmpy);                //找到的点再按照y升序排序</div><div class="line">		<span class="keyword">for</span> (i = 0; i &lt; p; i++)              //每个点开始穷举</div><div class="line">		&#123;  </div><div class="line">			<span class="keyword">for</span> (j = 1; (j &lt;= 7) &amp;&amp; (i + j &lt; p); j++)   //这个点分别和其余最多7个点算出距离比较</div><div class="line">			&#123;     </div><div class="line">				<span class="keyword">if</span> (c[i].index != c[i + j].index)     //最小值只可能出现在分别属于不同标志上</div><div class="line">				&#123;  </div><div class="line">					min = getDistance(c[i], c[i + j]);  </div><div class="line">					<span class="keyword">if</span>(min &lt; dis)  </div><div class="line">					dis = min;  </div><div class="line">				&#125;  </div><div class="line">			&#125;  </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">	<span class="built_in">return</span> dis;  </div><div class="line">&#125;  </div><div class="line">int <span class="function"><span class="title">main</span></span> ()  </div><div class="line">&#123;  </div><div class="line">	int n;  </div><div class="line">	<span class="keyword">while</span> (cin &gt;&gt; n &amp;&amp; n != 0)  </div><div class="line">	&#123;  </div><div class="line">		double result = 0;    </div><div class="line">		<span class="keyword">for</span> (int i = 0; i &lt; n; i++)  </div><div class="line">		&#123;  </div><div class="line">			num[i].index = 0;  </div><div class="line">			cin &gt;&gt; num[i].x &gt;&gt; num[i].y;  </div><div class="line">		&#125;  </div><div class="line">		sort (num, num + n, cmpx);  </div><div class="line">		result = divide_conquer(0, n - 1);  </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, result / 2);  </div><div class="line">	&#125;   </div><div class="line">	<span class="built_in">return</span> 0;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>　　根据水平方向的坐标把平面上的N个点分成两部分Left和Right。我们希望这两个部分点数的个数差不多。假设分别求出了Left和Right两个部分距离最近的点对的最短距离<br>为MinDist（Left）和MinDist（Right），还有一种情况我们没有考虑，那就是点对中一个点来自Left部分，另一个点来自Right部分。最直接的想法，那就是穷举Left和<br>Right两个部分之间的点对，这样的点对很多，最多可能有N×N/4对。显然，穷举所有Left和Right之间的点对是不好的做法。是否可以只考虑有可能成为最近点对的候选点对<br>呢？由于我们已经知道Left和Right两个部分中的最近点对距离分别为MinDist（Left）和MinDist（Right），如果Left和Right之间的点对距离超过MDist=MinValue<br>（MinDist（Left），MinDist（Right）），我们则对它们并不感兴趣，因为这些点对不可能是最近点对。</p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146924251232.png" alt=""><br></div><br>　　如图2-10所示，通过直接x=M将所有的点分成x<m和x>M两部分，在分别求出两部分的最近点对之后，只需要考虑点对CD。因为其他点对AD，BD，CE，CF，CG等都不可能成<br>为最近点对。也就是说，只要考虑从x=M-Mdist到x=M+MDist之间这个带状区域内的最小点对，然后再跟MDist比较就可以了。在计算带状区域的最小点对时，可以按Y坐<br>标，对带状区域内的顶点进行排序。如果一个点对的距离小于MDist，那么它们一定在一个MDist×（2×Mdist）的区域内（如图2-11所示)</m和x></p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146924251291.png" alt=""><br></div><br>　　而在左右两个Mdist*Mdist正方形区域内。最多都只能含有4个点。如果超过4个点，则这个正方形区域内至少存在一个点对的距离小于Mdist，这根x<m和x>M两个部分的最近<br>点对距离分别是MinDist（Left）和MinDist（Right）矛盾。</m和x></p>
<p><div align="center"><br><img src="http://cfmfa.img48.wal8.com/img48/553098_20160720105230/146924251339.png" alt=""><br></div><br>　　因此，一个MDist×（2×Mdist）的区域内最多有8个点（如图2-12所示）。对于任意一个带状区域内的顶点，只要考虑它与按Y坐标排序且紧接着的7个点之间的距离就可<br>以了。</p>
<h3 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h3><p>sort函数的第三个参数需要自己另写cmpx和cmpy函数。以上代码在杭电上只能在C++环境中通过编译，在G++环境中编译会超时。此题在杭电上AC的代码中部分都没有考<br>虑全面，该方法考虑了全部情况。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[First article about hexo]]></title>
      <url>http://xuboming8.github.io/2016/08/30/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br><a id="more"></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
